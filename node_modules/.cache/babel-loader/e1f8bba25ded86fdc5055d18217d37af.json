{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { Vector3 } from '../math/Vector3.js';\nimport { Quaternion } from '../math/Quaternion.js';\nimport { Audio } from './Audio.js';\nimport { Object3D } from '../core/Object3D.js';\n\nvar _position = new Vector3();\n\nvar _quaternion = new Quaternion();\n\nvar _scale = new Vector3();\n\nvar _orientation = new Vector3();\n\nfunction PositionalAudio(listener) {\n  Audio.call(this, listener);\n  this.panner = this.context.createPanner();\n  this.panner.panningModel = 'HRTF';\n  this.panner.connect(this.gain);\n}\n\nPositionalAudio.prototype = Object.assign(Object.create(Audio.prototype), {\n  constructor: PositionalAudio,\n  getOutput: function () {\n    return this.panner;\n  },\n  getRefDistance: function () {\n    return this.panner.refDistance;\n  },\n  setRefDistance: function (value) {\n    this.panner.refDistance = value;\n    return this;\n  },\n  getRolloffFactor: function () {\n    return this.panner.rolloffFactor;\n  },\n  setRolloffFactor: function (value) {\n    this.panner.rolloffFactor = value;\n    return this;\n  },\n  getDistanceModel: function () {\n    return this.panner.distanceModel;\n  },\n  setDistanceModel: function (value) {\n    this.panner.distanceModel = value;\n    return this;\n  },\n  getMaxDistance: function () {\n    return this.panner.maxDistance;\n  },\n  setMaxDistance: function (value) {\n    this.panner.maxDistance = value;\n    return this;\n  },\n  setDirectionalCone: function (coneInnerAngle, coneOuterAngle, coneOuterGain) {\n    this.panner.coneInnerAngle = coneInnerAngle;\n    this.panner.coneOuterAngle = coneOuterAngle;\n    this.panner.coneOuterGain = coneOuterGain;\n    return this;\n  },\n  updateMatrixWorld: function (force) {\n    Object3D.prototype.updateMatrixWorld.call(this, force);\n    if (this.hasPlaybackControl === true && this.isPlaying === false) return;\n    this.matrixWorld.decompose(_position, _quaternion, _scale);\n\n    _orientation.set(0, 0, 1).applyQuaternion(_quaternion);\n\n    var panner = this.panner;\n\n    if (panner.positionX) {\n      // code path for Chrome and Firefox (see #14393)\n      var endTime = this.context.currentTime + this.listener.timeDelta;\n      panner.positionX.linearRampToValueAtTime(_position.x, endTime);\n      panner.positionY.linearRampToValueAtTime(_position.y, endTime);\n      panner.positionZ.linearRampToValueAtTime(_position.z, endTime);\n      panner.orientationX.linearRampToValueAtTime(_orientation.x, endTime);\n      panner.orientationY.linearRampToValueAtTime(_orientation.y, endTime);\n      panner.orientationZ.linearRampToValueAtTime(_orientation.z, endTime);\n    } else {\n      panner.setPosition(_position.x, _position.y, _position.z);\n      panner.setOrientation(_orientation.x, _orientation.y, _orientation.z);\n    }\n  }\n});\nexport { PositionalAudio };","map":null,"metadata":{},"sourceType":"module"}