{"ast":null,"code":"import _slicedToArray from \"/home/gov/projects/three/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/gov/projects/three/src/threedloadplan/panel/AWBList.js\";\nimport React, { useState } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport AWBListItem from './AWBListItem'; //import { ITextField } from 'icoreact/lib/ico/framework/html/elements';\n//import { wrapForm } from 'icoreact/lib/ico/framework/component/common/form';\n// TODO: Use ITextField\n\nconst ITextField = props => React.createElement(\"input\", Object.assign({\n  type: \"text\",\n  className: \"search-icon\"\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}));\n\nexport default (({\n  plannedGroups,\n  awbs,\n  dimensions,\n  filteredAwb,\n  filteredGroup,\n  awbFilterUpdated,\n  groupFilterUpdated\n}) => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isDropDownOpen = _useState2[0],\n        setDropDownOpen = _useState2[1];\n\n  const toggle = e => {\n    setDropDownOpen(!isDropDownOpen);\n    groupFilterUpdated(e.currentTarget.textContent === 'All' ? null : e.currentTarget.textContent);\n  };\n\n  const groupEntries = Object.entries(plannedGroups);\n  const awbNumbers = groupEntries.filter(([groupName, _]) => !filteredGroup || filteredGroup === groupName).reduce((acc, [groupName, group]) => acc.concat(group.loadedShipments.filter(awbNumber => !filteredAwb || awbNumber.indexOf(filteredAwb) !== -1)), []);\n  return React.createElement(\"div\", {\n    className: \"awb-list-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"awb-list-header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"awb-search-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"awb-count\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, awbNumbers.length), React.createElement(\"span\", {\n    className: \"awb-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"AWBs\"), React.createElement(ITextField, {\n    onChange: e => awbFilterUpdated(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"group-toggle-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    className: \"group-toggle-label\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"ULD configuration and plan for:\"), React.createElement(Dropdown, {\n    isOpen: isDropDownOpen,\n    toggle: toggle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(DropdownToggle, {\n    className: \"group-toggle-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, filteredGroup || 'All'), React.createElement(DropdownMenu, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, React.createElement(DropdownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, \"All\"), groupEntries.map(([groupName, _]) => React.createElement(DropdownItem, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, groupName)))))), React.createElement(\"div\", {\n    className: \"awb-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, awbNumbers.map((awbNumber, key) => React.createElement(AWBListItem, {\n    awb: awbs[awbNumber],\n    key: '' + key,\n    index: key,\n    dimensions: dimensions,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }))));\n});","map":{"version":3,"sources":["/home/gov/projects/three/src/threedloadplan/panel/AWBList.js"],"names":["React","useState","Dropdown","DropdownToggle","DropdownMenu","DropdownItem","AWBListItem","ITextField","props","plannedGroups","awbs","dimensions","filteredAwb","filteredGroup","awbFilterUpdated","groupFilterUpdated","isDropDownOpen","setDropDownOpen","toggle","e","currentTarget","textContent","groupEntries","Object","entries","awbNumbers","filter","groupName","_","reduce","acc","group","concat","loadedShipments","awbNumber","indexOf","length","target","value","map","key"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\nimport AWBListItem from './AWBListItem';\r\n\r\n//import { ITextField } from 'icoreact/lib/ico/framework/html/elements';\r\n//import { wrapForm } from 'icoreact/lib/ico/framework/component/common/form';\r\n\r\n// TODO: Use ITextField\r\nconst ITextField = props => (\r\n  <input type='text' className='search-icon' {...props} />\r\n);\r\n\r\nexport default ({\r\n  plannedGroups,\r\n  awbs,\r\n  dimensions,\r\n  filteredAwb,\r\n  filteredGroup,\r\n  awbFilterUpdated,\r\n  groupFilterUpdated\r\n}) => {\r\n  const [isDropDownOpen, setDropDownOpen] = useState(false);\r\n  const toggle = e => {\r\n    setDropDownOpen(!isDropDownOpen);\r\n    groupFilterUpdated(\r\n      e.currentTarget.textContent === 'All'\r\n        ? null\r\n        : e.currentTarget.textContent\r\n    );\r\n  };\r\n  const groupEntries = Object.entries(plannedGroups);\r\n  const awbNumbers = groupEntries.filter(([groupName, _]) =>\r\n    !filteredGroup || filteredGroup === groupName\r\n  ).reduce((acc, [groupName, group]) =>\r\n    acc.concat(group.loadedShipments.filter(awbNumber =>\r\n      !filteredAwb || awbNumber.indexOf(filteredAwb) !== -1\r\n    )), []\r\n  );\r\n\r\n  return (\r\n    <div className='awb-list-container'>\r\n      <div className='awb-list-header'>\r\n        <div className='awb-search-container'>\r\n          <span className='awb-count'>{awbNumbers.length}</span>\r\n          <span className='awb-label'>AWBs</span>\r\n          <ITextField onChange={e => awbFilterUpdated(e.target.value)} />\r\n        </div>\r\n        <div className='group-toggle-container'>\r\n          <span className='group-toggle-label'>\r\n            ULD configuration and plan for:\r\n          </span>\r\n          <Dropdown isOpen={isDropDownOpen} toggle={toggle}>\r\n            <DropdownToggle className='group-toggle-content'>\r\n              {filteredGroup || 'All'}\r\n            </DropdownToggle>\r\n            <DropdownMenu>\r\n              <DropdownItem>All</DropdownItem>\r\n              {groupEntries.map(([groupName, _]) =>\r\n                <DropdownItem>{groupName}</DropdownItem>\r\n              )}\r\n            </DropdownMenu>\r\n          </Dropdown>\r\n        </div>\r\n      </div>\r\n      <div className='awb-list'>\r\n        {awbNumbers.map((awbNumber, key) =>\r\n          <AWBListItem\r\n            awb={awbs[awbNumber]}\r\n            key={'' + key}\r\n            index={key}\r\n            dimensions={dimensions}\r\n        />)}\r\n      </div>\r\n    </div>\r\n  );\r\n};"]},"metadata":{},"sourceType":"module"}