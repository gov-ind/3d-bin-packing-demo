{"ast":null,"code":"var _jsxFileName = \"/home/gov/projects/three/src/threedloadplan/panel/ULDListItem.js\";\nimport React, { Fragment } from 'react';\nimport * as THREE from 'three/src/Three';\nimport { Canvas, extend, useThree } from 'react-three-fiber';\nimport OrbitControls from 'three-orbitcontrols';\nextend({\n  OrbitControls\n});\nconst camera = {\n  position: new THREE.Vector3(0, 0, 300)\n};\nconst style = {\n  width: 400,\n  height: 400\n};\nconst plain = new THREE.MeshBasicMaterial({\n  map: new THREE.TextureLoader().load('images/crate.png')\n});\nconst untiltable = new THREE.MeshBasicMaterial({\n  map: new THREE.TextureLoader().load('images/crate_untiltable.png')\n});\nconst unstackable = new THREE.MeshBasicMaterial({\n  map: new THREE.TextureLoader().load('images/crate_unstackable.png')\n});\n\nconst ULDScene = ({\n  uld,\n  dimensions\n}) => {\n  const _useThree = useThree(),\n        camera = _useThree.camera,\n        gl = _useThree.gl;\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"orbitControls\", {\n    args: [camera, gl.domElement],\n    enableDamping: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }), React.createElement(\"group\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, uld.contour.map(face => React.createElement(\"line\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"geometry\", {\n    attach: \"geometry\",\n    vertices: face.map(point => new THREE.Vector3(...point)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), React.createElement(\"lineBasicMaterial\", {\n    attach: \"material\",\n    color: \"#8A8A8A\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })))), uld.items.map(item => {\n    const dimension = dimensions[item];\n    const material = dimension.isStackable && dimension.isTiltable ? plain : !dimension.isTiltable ? untiltable : unstackable;\n    return React.createElement(\"mesh\", {\n      position: [dimension.x, dimension.y, dimension.z],\n      material: material,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, React.createElement(\"boxBufferGeometry\", {\n      attach: \"geometry\",\n      args: [dimension.length, dimension.breadth, dimension.height],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }));\n  }));\n};\n\nexport default (({\n  uld,\n  dimensions\n}) => React.createElement(Canvas, {\n  style: style,\n  camera: camera,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63\n  },\n  __self: this\n}, React.createElement(ULDScene, {\n  uld: uld,\n  dimensions: dimensions,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 64\n  },\n  __self: this\n})));","map":{"version":3,"sources":["/home/gov/projects/three/src/threedloadplan/panel/ULDListItem.js"],"names":["React","Fragment","THREE","Canvas","extend","useThree","OrbitControls","camera","position","Vector3","style","width","height","plain","MeshBasicMaterial","map","TextureLoader","load","untiltable","unstackable","ULDScene","uld","dimensions","gl","domElement","contour","face","point","items","item","dimension","material","isStackable","isTiltable","x","y","z","length","breadth"],"mappings":"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","sourcesContent":["import React, { Fragment } from 'react';\r\nimport * as THREE from 'three/src/Three';\r\nimport { Canvas, extend, useThree } from 'react-three-fiber';\r\nimport OrbitControls from 'three-orbitcontrols';\r\n\r\nextend({ OrbitControls });\r\n\r\nconst camera = {\r\n  position: new THREE.Vector3(0, 0, 300)\r\n};\r\nconst style = {\r\n  width: 400,\r\n  height: 400\r\n};\r\nconst plain = new THREE.MeshBasicMaterial({\r\n  map: new THREE.TextureLoader().load('images/crate.png')\r\n});\r\nconst untiltable = new THREE.MeshBasicMaterial({\r\n  map: new THREE.TextureLoader().load('images/crate_untiltable.png')\r\n});\r\nconst unstackable = new THREE.MeshBasicMaterial({\r\n  map: new THREE.TextureLoader().load('images/crate_unstackable.png')\r\n});\r\n\r\nconst ULDScene = ({ uld, dimensions }) => {\r\n  const { camera, gl } = useThree();\r\n\r\n  return (\r\n    <Fragment>\r\n      <orbitControls args={[camera, gl.domElement]} enableDamping />\r\n      <group>\r\n        {uld.contour.map(face =>\r\n          <line>\r\n            <geometry\r\n              attach='geometry'\r\n              vertices={face.map(point => new THREE.Vector3(...point))}\r\n            />\r\n            <lineBasicMaterial attach='material' color='#8A8A8A' />\r\n          </line>)}\r\n      </group>\r\n      {uld.items.map(item => {\r\n        const dimension = dimensions[item];\r\n        const material = dimension.isStackable && dimension.isTiltable\r\n          ? plain\r\n          : !dimension.isTiltable\r\n            ? untiltable\r\n            : unstackable;\r\n\r\n        return (\r\n          <mesh position={[dimension.x, dimension.y, dimension.z]} material={material}>         \r\n            <boxBufferGeometry\r\n              attach='geometry'\r\n              args={[dimension.length, dimension.breadth, dimension.height]}\r\n            />\r\n          </mesh>\r\n        );\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ({ uld, dimensions }) =>\r\n  <Canvas style={style} camera={camera}>\r\n    <ULDScene uld={uld} dimensions={dimensions} />\r\n  </Canvas>"]},"metadata":{},"sourceType":"module"}