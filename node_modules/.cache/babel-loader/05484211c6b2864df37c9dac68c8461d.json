{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n * @author WestLangley / http://github.com/WestLangley\n */\nimport { Matrix3 } from '../math/Matrix3.js';\nimport { Vector3 } from '../math/Vector3.js';\nimport { LineSegments } from '../objects/LineSegments.js';\nimport { LineBasicMaterial } from '../materials/LineBasicMaterial.js';\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\nimport { BufferGeometry } from '../core/BufferGeometry.js';\n\nvar _v1 = new Vector3();\n\nvar _v2 = new Vector3();\n\nvar _normalMatrix = new Matrix3();\n\nfunction FaceNormalsHelper(object, size, hex, linewidth) {\n  // FaceNormalsHelper only supports THREE.Geometry\n  this.object = object;\n  this.size = size !== undefined ? size : 1;\n  var color = hex !== undefined ? hex : 0xffff00;\n  var width = linewidth !== undefined ? linewidth : 1; //\n\n  var nNormals = 0;\n  var objGeometry = this.object.geometry;\n\n  if (objGeometry && objGeometry.isGeometry) {\n    nNormals = objGeometry.faces.length;\n  } else {\n    console.warn('THREE.FaceNormalsHelper: only THREE.Geometry is supported. Use THREE.VertexNormalsHelper, instead.');\n  } //\n\n\n  var geometry = new BufferGeometry();\n  var positions = new Float32BufferAttribute(nNormals * 2 * 3, 3);\n  geometry.addAttribute('position', positions);\n  LineSegments.call(this, geometry, new LineBasicMaterial({\n    color: color,\n    linewidth: width\n  })); //\n\n  this.matrixAutoUpdate = false;\n  this.update();\n}\n\nFaceNormalsHelper.prototype = Object.create(LineSegments.prototype);\nFaceNormalsHelper.prototype.constructor = FaceNormalsHelper;\n\nFaceNormalsHelper.prototype.update = function () {\n  this.object.updateMatrixWorld(true);\n\n  _normalMatrix.getNormalMatrix(this.object.matrixWorld);\n\n  var matrixWorld = this.object.matrixWorld;\n  var position = this.geometry.attributes.position; //\n\n  var objGeometry = this.object.geometry;\n  var vertices = objGeometry.vertices;\n  var faces = objGeometry.faces;\n  var idx = 0;\n\n  for (var i = 0, l = faces.length; i < l; i++) {\n    var face = faces[i];\n    var normal = face.normal;\n\n    _v1.copy(vertices[face.a]).add(vertices[face.b]).add(vertices[face.c]).divideScalar(3).applyMatrix4(matrixWorld);\n\n    _v2.copy(normal).applyMatrix3(_normalMatrix).normalize().multiplyScalar(this.size).add(_v1);\n\n    position.setXYZ(idx, _v1.x, _v1.y, _v1.z);\n    idx = idx + 1;\n    position.setXYZ(idx, _v2.x, _v2.y, _v2.z);\n    idx = idx + 1;\n  }\n\n  position.needsUpdate = true;\n};\n\nexport { FaceNormalsHelper };","map":null,"metadata":{},"sourceType":"module"}