{"ast":null,"code":"/**\n * @author mrdoob / http://mrdoob.com/\n */\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\nimport { Group } from '../../objects/Group.js';\nimport { Matrix4 } from '../../math/Matrix4.js';\nimport { Vector4 } from '../../math/Vector4.js';\nimport { ArrayCamera } from '../../cameras/ArrayCamera.js';\nimport { PerspectiveCamera } from '../../cameras/PerspectiveCamera.js';\nimport { WebGLAnimation } from '../webgl/WebGLAnimation.js';\nimport { setProjectionFromUnion } from './WebVRUtils.js';\n\nfunction WebXRManager(renderer, gl) {\n  var scope = this;\n  var session = null;\n  var framebufferScaleFactor = 1.0;\n  var referenceSpace = null;\n  var referenceSpaceType = 'local-floor';\n  var pose = null;\n  var controllers = [];\n  var inputSources = [];\n\n  function isPresenting() {\n    return session !== null && referenceSpace !== null;\n  } //\n\n\n  var cameraL = new PerspectiveCamera();\n  cameraL.layers.enable(1);\n  cameraL.viewport = new Vector4();\n  var cameraR = new PerspectiveCamera();\n  cameraR.layers.enable(2);\n  cameraR.viewport = new Vector4();\n  var cameraVR = new ArrayCamera([cameraL, cameraR]);\n  cameraVR.layers.enable(1);\n  cameraVR.layers.enable(2); //\n\n  this.enabled = false;\n\n  this.getController = function (id) {\n    var controller = controllers[id];\n\n    if (controller === undefined) {\n      controller = new Group();\n      controller.matrixAutoUpdate = false;\n      controller.visible = false;\n      controllers[id] = controller;\n    }\n\n    return controller;\n  }; //\n\n\n  function onSessionEvent(event) {\n    for (var i = 0; i < controllers.length; i++) {\n      if (inputSources[i] === event.inputSource) {\n        controllers[i].dispatchEvent({\n          type: event.type\n        });\n      }\n    }\n  }\n\n  function onSessionEnd() {\n    renderer.setFramebuffer(null);\n    renderer.setRenderTarget(renderer.getRenderTarget()); // Hack #15830\n\n    animation.stop();\n    scope.dispatchEvent({\n      type: 'sessionend'\n    });\n  }\n\n  function onRequestReferenceSpace(value) {\n    referenceSpace = value;\n    animation.setContext(session);\n    animation.start();\n    scope.dispatchEvent({\n      type: 'sessionstart'\n    });\n  }\n\n  this.setFramebufferScaleFactor = function (value) {\n    framebufferScaleFactor = value;\n  };\n\n  this.setReferenceSpaceType = function (value) {\n    referenceSpaceType = value;\n  };\n\n  this.getSession = function () {\n    return session;\n  };\n\n  this.setSession = function (value) {\n    session = value;\n\n    if (session !== null) {\n      session.addEventListener('select', onSessionEvent);\n      session.addEventListener('selectstart', onSessionEvent);\n      session.addEventListener('selectend', onSessionEvent);\n      session.addEventListener('end', onSessionEnd);\n      session.updateRenderState({\n        baseLayer: new XRWebGLLayer(session, gl)\n      });\n      session.requestReferenceSpace(referenceSpaceType).then(onRequestReferenceSpace); //\n\n      inputSources = session.inputSources;\n      session.addEventListener('inputsourceschange', function () {\n        inputSources = session.inputSources;\n        console.log(inputSources);\n\n        for (var i = 0; i < controllers.length; i++) {\n          var controller = controllers[i];\n          controller.userData.inputSource = inputSources[i];\n        }\n      });\n    }\n  };\n\n  function updateCamera(camera, parent) {\n    if (parent === null) {\n      camera.matrixWorld.copy(camera.matrix);\n    } else {\n      camera.matrixWorld.multiplyMatrices(parent.matrixWorld, camera.matrix);\n    }\n\n    camera.matrixWorldInverse.getInverse(camera.matrixWorld);\n  }\n\n  this.getCamera = function (camera) {\n    if (isPresenting()) {\n      var parent = camera.parent;\n      var cameras = cameraVR.cameras;\n      updateCamera(cameraVR, parent);\n\n      for (var i = 0; i < cameras.length; i++) {\n        updateCamera(cameras[i], parent);\n      } // update camera and its children\n\n\n      camera.matrixWorld.copy(cameraVR.matrixWorld);\n      var children = camera.children;\n\n      for (var i = 0, l = children.length; i < l; i++) {\n        children[i].updateMatrixWorld(true);\n      }\n\n      setProjectionFromUnion(cameraVR, cameraL, cameraR);\n      return cameraVR;\n    }\n\n    return camera;\n  };\n\n  this.isPresenting = isPresenting; // Animation Loop\n\n  var onAnimationFrameCallback = null;\n\n  function onAnimationFrame(time, frame) {\n    pose = frame.getViewerPose(referenceSpace);\n\n    if (pose !== null) {\n      var views = pose.views;\n      var baseLayer = session.renderState.baseLayer;\n      renderer.setFramebuffer(baseLayer.framebuffer);\n\n      for (var i = 0; i < views.length; i++) {\n        var view = views[i];\n        var viewport = baseLayer.getViewport(view);\n        var viewMatrix = view.transform.inverse.matrix;\n        var camera = cameraVR.cameras[i];\n        camera.matrix.fromArray(viewMatrix).getInverse(camera.matrix);\n        camera.projectionMatrix.fromArray(view.projectionMatrix);\n        camera.viewport.set(viewport.x, viewport.y, viewport.width, viewport.height);\n\n        if (i === 0) {\n          cameraVR.matrix.copy(camera.matrix);\n        }\n      }\n    } //\n\n\n    for (var i = 0; i < controllers.length; i++) {\n      var controller = controllers[i];\n      var inputSource = inputSources[i];\n\n      if (inputSource) {\n        var inputPose = frame.getPose(inputSource.targetRaySpace, referenceSpace);\n\n        if (inputPose !== null) {\n          controller.matrix.fromArray(inputPose.transform.matrix);\n          controller.matrix.decompose(controller.position, controller.rotation, controller.scale);\n          controller.visible = true;\n          continue;\n        }\n      }\n\n      controller.visible = false;\n    }\n\n    if (onAnimationFrameCallback) onAnimationFrameCallback(time);\n  }\n\n  var animation = new WebGLAnimation();\n  animation.setAnimationLoop(onAnimationFrame);\n\n  this.setAnimationLoop = function (callback) {\n    onAnimationFrameCallback = callback;\n  };\n\n  this.dispose = function () {}; // DEPRECATED\n\n\n  this.getStandingMatrix = function () {\n    console.warn('THREE.WebXRManager: getStandingMatrix() is no longer needed.');\n    return new Matrix4();\n  };\n\n  this.getDevice = function () {\n    console.warn('THREE.WebXRManager: getDevice() has been deprecated.');\n  };\n\n  this.setDevice = function () {\n    console.warn('THREE.WebXRManager: setDevice() has been deprecated.');\n  };\n\n  this.setFrameOfReferenceType = function () {\n    console.warn('THREE.WebXRManager: setFrameOfReferenceType() has been deprecated.');\n  };\n\n  this.submitFrame = function () {};\n}\n\nObject.assign(WebXRManager.prototype, EventDispatcher.prototype);\nexport { WebXRManager };","map":null,"metadata":{},"sourceType":"module"}