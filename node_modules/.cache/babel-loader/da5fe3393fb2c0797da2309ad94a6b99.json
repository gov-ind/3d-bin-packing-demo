{"ast":null,"code":"import _slicedToArray from \"/home/gov/projects/three/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/gov/projects/three/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/gov/projects/three/src/threedloadplan/panel/ThreeScene.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState, Fragment } from 'react';\nimport * as THREE from 'three/src/Three';\nimport { Canvas, extend, useThree } from 'react-three-fiber';\nimport OrbitControls from 'three-orbitcontrols';\nimport d from './data.json';\nimport shape from '../shape.json';\nextend({\n  OrbitControls\n});\nconst camera = {\n  position: new THREE.Vector3(0, 0, 250)\n};\nconst style = {\n  width: 800,\n  height: 800\n};\nconst plain = new THREE.MeshBasicMaterial({\n  map: new THREE.TextureLoader().load('images/crate.png')\n});\nconst untiltable = new THREE.MeshBasicMaterial({\n  map: new THREE.TextureLoader().load('images/crate_untiltable.png')\n});\nconst unstackable = new THREE.MeshBasicMaterial({\n  map: new THREE.TextureLoader().load('images/crate_unstackable.png')\n});\nlet numberOfHeaviestItemsToPackFromCenter = 15;\n\nconst getCornerCoordOfItemInBin = (bin, item) => ({\n  x: bin.cornerCoord.x + item.l / 2,\n  y: bin.cornerCoord.y + item.b / 2,\n  z: bin.cornerCoord.z + item.h / 2\n});\n\nconst splitBinByLength = (bin, item) => ({\n  x: item.l / 2,\n  y: 0,\n  z: 0,\n  l: bin.l - item.l,\n  b: bin.b,\n  h: bin.h,\n  color: '#CECECE',\n  cornerCoord: {\n    x: bin.cornerCoord.x + item.l,\n    y: bin.cornerCoord.y,\n    z: bin.cornerCoord.z\n  },\n  type: 'l',\n  reservedForHeavyItems: bin.reservedForHeavyItems\n});\n\nconst splitBinByHeight = (bin, item) => ({\n  x: -bin.l / 2 + item.l / 2,\n  y: 0,\n  z: item.h / 2,\n  l: item.l,\n  b: bin.b,\n  h: bin.h - item.h,\n  color: '#000',\n  cornerCoord: {\n    x: bin.cornerCoord.x,\n    y: bin.cornerCoord.y,\n    z: bin.cornerCoord.z + item.h\n  },\n  type: 'h',\n  reservedForHeavyItems: bin.reservedForHeavyItems\n});\n\nconst splitBinByBreadth = (bin, item) => ({\n  x: -bin.l / 2 + item.l / 2,\n  y: item.b / 2,\n  z: -bin.h / 2 + item.h / 2,\n  l: item.l,\n  b: bin.b - item.b,\n  h: item.h,\n  color: '#000',\n  cornerCoord: {\n    x: bin.cornerCoord.x,\n    y: bin.cornerCoord.y + item.b,\n    z: bin.cornerCoord.z\n  },\n  type: 'b',\n  reservedForHeavyItems: bin.reservedForHeavyItems\n});\n\nconst createSubBins = (bin, item) => [splitBinByLength(bin, item), splitBinByHeight(bin, item), splitBinByBreadth(bin, item)];\n\nconst theBin = {\n  l: 244,\n  b: 163,\n  h: 163,\n  cornerCoord: {\n    x: -244 / 2,\n    y: -163 / 2,\n    z: -163 / 2\n  }\n};\nconst binsForHeaviestFromMiddle = [{\n  // left\n  x: -244 / 2 + 80 / 2,\n  y: 0,\n  z: 0,\n  l: 80,\n  b: 163,\n  h: 163,\n  cornerCoord: {\n    x: -244 / 2,\n    y: -163 / 2,\n    z: -163 / 2\n  },\n  color: 'red'\n}, {\n  // middle\n  x: 0,\n  y: 0,\n  z: 0,\n  l: 84,\n  b: 163,\n  h: 83,\n  cornerCoord: {\n    x: -244 / 2 + 80,\n    y: -163 / 2,\n    z: -163 / 2 + 40\n  },\n  color: 'red',\n  reservedForHeavyItems: true\n}, {\n  // right\n  x: -244 / 2 + 80 / 2 + 80 + 84,\n  y: 0,\n  z: 0,\n  l: 80,\n  b: 163,\n  h: 163,\n  cornerCoord: {\n    x: -244 / 2 + 80 + 84,\n    y: -163 / 2,\n    z: -163 / 2\n  },\n  color: 'red'\n}, {\n  // back\n  x: 0,\n  y: 0,\n  z: -163 / 2 + 40 / 2,\n  l: 84,\n  b: 163,\n  h: 40,\n  cornerCoord: {\n    x: -244 / 2 + 80,\n    y: -163 / 2,\n    z: -163 / 2\n  },\n  color: 'red'\n}, {\n  // front\n  x: 0,\n  y: 0,\n  z: 163 / 2 - 40 / 2,\n  l: 84,\n  b: 163,\n  h: 40,\n  cornerCoord: {\n    x: -244 / 2 + 80,\n    y: -163 / 2,\n    z: -163 / 2 + 40 + 83\n  },\n  color: 'red'\n}];\n\nconst createInitialBins = strategy => {\n  if (strategy === 1) {\n    // heaviest from middle\n    return binsForHeaviestFromMiddle;\n  } else {\n    numberOfHeaviestItemsToPackFromCenter = -1;\n    return [{\n      l: 244,\n      b: 163,\n      h: 163,\n      cornerCoord: {\n        x: -244 / 2,\n        y: -163 / 2,\n        z: -163 / 2\n      }\n    }];\n  }\n};\n\nlet bins = createInitialBins(0);\nwindow.bins = bins;\nlet items = [{\n  l: 40,\n  b: 45,\n  h: 46\n}];\n\nconst spinItem = (item, axis = 1) => {\n  let tmp, tmp2;\n  unspinItem(item);\n\n  if (axis === 1) {\n    tmp = item.l;\n    item.l = item.b;\n    item.b = tmp;\n  } else if (axis === 2) {\n    tmp = item.b;\n    item.b = item.h;\n    item.h = tmp;\n  } else if (axis === 3) {\n    tmp = item.l;\n    item.l = item.h;\n    item.h = tmp;\n  } else if (axis === 4) {\n    tmp = item.l;\n    item.l = item.b;\n    item.b = tmp;\n    tmp2 = item.h;\n    item.h = item.l;\n    item.l = tmp2;\n  } else if (axis === 5) {\n    tmp = item.l;\n    item.l = item.b;\n    item.b = tmp;\n    tmp2 = item.h;\n    item.h = item.b;\n    item.b = tmp2;\n  }\n\n  item.axis = axis;\n}; //spinItem()\n\n\nconst unspinItem = item => {\n  let tmp, tmp2;\n\n  if (item.axis === 1) {\n    tmp = item.l;\n    item.l = item.b;\n    item.b = tmp;\n  } else if (item.axis === 2) {\n    tmp = item.b;\n    item.b = item.h;\n    item.h = tmp;\n  } else if (item.axis === 3) {\n    tmp = item.l;\n    item.l = item.h;\n    item.h = tmp;\n  } else if (item.axis === 4) {\n    tmp2 = item.h;\n    item.h = item.l;\n    item.l = tmp2;\n    tmp = item.l;\n    item.l = item.b;\n    item.b = tmp;\n  } else if (item.axis === 5) {\n    tmp2 = item.h;\n    item.h = item.b;\n    item.b = tmp2;\n    tmp = item.l;\n    item.l = item.b;\n    item.b = tmp;\n  }\n\n  item.axis = 0;\n};\n\nconst doesItemFitInBin = (bin, item) => item.l <= bin.l && item.b <= bin.b && item.h <= bin.h;\n\nconst pack = items => {\n  debugger;\n  bins = createInitialBins(0);\n  /*if (bins.length === 1) {\r\n    packItem(bins[0], 0, items[0]);\r\n    bins = filterAndSortBins(bins);\r\n    return { bins, items };\r\n  }*/\n\n  let numberOfUnpackedItems = items.length;\n  let previousUnpackedItems = -1;\n\n  while (previousUnpackedItems !== numberOfUnpackedItems && numberOfUnpackedItems !== 0) {\n    const binsCopy = [...bins];\n    previousUnpackedItems = numberOfUnpackedItems;\n\n    for (let i = 0; i < binsCopy.length; i++) {\n      const bin = binsCopy[i];\n      const candidateItems = [];\n\n      for (let j = 0; j < items.length; j++) {\n        const item = items[j];\n        if (item.packed) continue;\n\n        if (doesItemFitInBin(bin, item)) {\n          candidateItems.push({\n            item,\n            index: j,\n            spin: 0\n          });\n        }\n        /*else*/\n\n\n        if (item.spinnable) {\n          spinItem(item, 1);\n\n          if (doesItemFitInBin(bin, item)) {\n            candidateItems.push({\n              item,\n              index: j,\n              spin: 1\n            });\n          } //else {\n\n\n          spinItem(item, 2);\n\n          if (doesItemFitInBin(bin, item)) {\n            candidateItems.push({\n              item,\n              index: j,\n              spin: 2\n            });\n          } //else {\n\n\n          spinItem(item, 3);\n\n          if (doesItemFitInBin(bin, item)) {\n            candidateItems.push({\n              item,\n              index: j,\n              spin: 3\n            });\n          } //else {\n\n\n          spinItem(item, 4);\n\n          if (doesItemFitInBin(bin, item)) {\n            candidateItems.push({\n              item,\n              index: j,\n              spin: 4\n            });\n          } //else {\n\n\n          spinItem(item, 5);\n\n          if (doesItemFitInBin(bin, item)) {\n            candidateItems.push({\n              item,\n              index: j,\n              spin: 5\n            });\n          }\n\n          unspinItem(item); //}\n          //}\n          //}\n          //}\n        }\n      } //debugger;\n\n\n      if (candidateItems.length > 0) {\n        const _getOptimalItemForBin = getOptimalItemForBin(candidateItems, bin),\n              optimalItemIndex = _getOptimalItemForBin.optimalItemIndex,\n              optimalItemSpin = _getOptimalItemForBin.optimalItemSpin;\n\n        spinItem(items[optimalItemIndex], optimalItemSpin);\n        packItem(bin, i, items[optimalItemIndex]);\n      } //debugger;\n\n    }\n\n    debugger;\n    bins = filterAndSortBins(bins);\n    debugger;\n    window.bins = bins;\n    numberOfUnpackedItems = items.filter(_ => !_.packed).length;\n    if (numberOfUnpackedItems === 0) break;\n  }\n\n  return {\n    bins,\n    items\n  };\n};\n\nconst isFirstFit = bin => {\n  return true;\n  return bin.type === 'l';\n};\n\nconst getOptimalItemForBin = (items, bin) => {\n  let optimalItem = items[0].item;\n  let optimalItemIndex = items[0].index;\n  let optimalItemSpin = items[0].spin;\n  items.map(({\n    item,\n    index,\n    spin\n  }) => {\n    if (bin.type === 'h' && item.l > optimalItem.l) {\n      optimalItem = item;\n      optimalItemIndex = index;\n      optimalItemSpin = spin;\n    } else if (bin.type === 'b' && (bin.h - item.h) * bin.l * item.b + item.h * (bin.l - item.l) * item.b < (bin.h - optimalItem.h) * bin.l * optimalItem.b + optimalItem.h * (bin.l - optimalItem.l) * optimalItem.b) {\n      optimalItem = item;\n      optimalItemIndex = index;\n      optimalItemSpin = spin;\n    } else if (item.l * item.b * item.h > optimalItem.l * optimalItem.b * optimalItem.h) {\n      optimalItem = item;\n      optimalItemIndex = index;\n      optimalItemSpin = spin;\n    }\n  });\n  return {\n    optimalItemIndex,\n    optimalItemSpin\n  };\n};\n\nconst getOptimalHBin = (binIndices, item) => {\n  let optimalBinIndex = binIndices[0].index;\n  let optimalSpin = binIndices[0].spin;\n  binIndices.map(({\n    index,\n    spin\n  }) => {\n    const targetBin = bins[index];\n    const optimalBin = bins[optimalBinIndex];\n    let targetBinFreeVolume, optimalBinFreeVolume;\n\n    if (targetBin.type === 'h') {\n      targetBinFreeVolume = (targetBin.l - item.l) * item.h * item.b;\n    }\n\n    if (optimalBin.type === 'h') {\n      optimalBinFreeVolume = (optimalBin.l - item.l) * item.h * item.b;\n    }\n    /*if (targetBin.type === 'h') {\r\n      if (optimalBin.type === 'h' && targetBinFreeVolume < ((optimalBin.l - optimalBin.l) * optimalBin.h * optimalBin.b)) {\r\n        optimalBinIndex = index;\r\n      }\r\n      else if (optimalBin.type === 'b' && ((targetBin.l - item.l) * item.h * item.b) < ((optimalBin.l - optimalBin.l) * optimalBin.h * optimalBin.b))\r\n    }*/\n\n\n    if (targetBinFreeVolume < optimalBinFreeVolume) {\n      optimalBinIndex = index;\n      optimalSpin = spin;\n    }\n    /*else if (targetBin.type === 'b' && (targetBin.l + targetBin.h) < (optimalBin.l + optimalBin.h)) {\r\n      optimalBinIndex = index;\r\n    }*/\n\n  });\n  return {\n    optimalBinIndex,\n    optimalSpin\n  };\n};\n\nconst getOptimalBBin = (binIndices, item) => {\n  let optimalBinIndex = binIndices[0].index;\n  let optimalSpin = binIndices[0].spin;\n  binIndices.map(({\n    index,\n    spin\n  }) => {\n    const targetBin = bins[index];\n    const optimalBin = bins[optimalBinIndex];\n    let targetBinFreeVolume, optimalBinFreeVolume;\n\n    if (targetBin.type === 'b') {\n      targetBinFreeVolume = (targetBin.l - item.l) * item.h * item.b + item.l * (targetBin.h - item.h) * item.b;\n    }\n\n    if (targetBin.type === 'b') {\n      optimalBinFreeVolume = (optimalBin.l - item.l) * item.h * item.b + item.l * (optimalBin.h - item.h) * item.b;\n    }\n    /*if (targetBin.type === 'h') {\r\n      if (optimalBin.type === 'h' && targetBinFreeVolume < ((optimalBin.l - optimalBin.l) * optimalBin.h * optimalBin.b)) {\r\n        optimalBinIndex = index;\r\n      }\r\n      else if (optimalBin.type === 'b' && ((targetBin.l - item.l) * item.h * item.b) < ((optimalBin.l - optimalBin.l) * optimalBin.h * optimalBin.b))\r\n    }*/\n\n\n    if (targetBinFreeVolume < optimalBinFreeVolume) {\n      optimalBinIndex = index;\n      optimalSpin = spin;\n    }\n    /*else if (targetBin.type === 'b' && (targetBin.l + targetBin.h) < (optimalBin.l + optimalBin.h)) {\r\n      optimalBinIndex = index;\r\n    }*/\n\n  });\n  return {\n    optimalBinIndex,\n    optimalSpin\n  };\n};\n\nconst packItem = (bin, binIndex, item) => {\n  const _ = getCornerCoordOfItemInBin(bin, item);\n\n  bins.push(...createSubBins(bin, item));\n  bins[binIndex] = null;\n  item.x = _.x;\n  item.y = _.y;\n  item.z = _.z;\n  item.packed = true;\n};\n\nconst filterAndSortBins = bins => bins.filter(bin => bin && bin.l !== 0 && bin.b !== 0 && bin.h !== 0).sort((a, b) => {\n  if (a.type === 'h') {\n    if (b.type !== 'h') {\n      return -1;\n    }\n\n    if (a.l > b.l) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  if (a.type === 'b') {\n    if (b.type === 'l') return -1;\n\n    if (a.l * a.h > b.l * b.h) {\n      return -1;\n    }\n\n    return 1;\n  }\n\n  if (a.type === 'l') return 1;\n});\n\nconst sortItemsByVolume = items => items.sort((a, b) => {\n  if (a.unstackable && !b.unstackable) return 1;\n  if (b.unstackable && !a.unstackable) return -1;\n  if (a.l * a.b * a.h > b.l * b.b * b.h) return -1;\n  return 1;\n});\n\nconst putNHeaviestItemsFirst = (items, n = numberOfHeaviestItemsToPackFromCenter) => {\n  if (numberOfHeaviestItemsToPackFromCenter === -1) return items;\n  const copy = items.map((item, index) => ({\n    item,\n    index\n  })); // TODO: handle heaviest but not stackable\n\n  copy.sort((a, b) => {\n    if (a.item.unstackable) {\n      return 1;\n    }\n\n    if (a.item.weight > b.item.weight) return -1;\n    return 1;\n  });\n\n  for (let i = 0; i < n; i++) {\n    items[copy[i].index] = null;\n  }\n\n  return copy.map(_ => _objectSpread({}, _.item, {\n    heavy: true\n  })).slice(0, n).concat(items.filter(_ => _));\n};\n\nconst ULDScene = ({\n  uld,\n  dimensions,\n  items = [],\n  subBins\n}) => {\n  const _useThree = useThree(),\n        camera = _useThree.camera,\n        gl = _useThree.gl;\n  /*const item = {\r\n    x: -244 / 2,\r\n    y: -163 / 2,\r\n    z: -163 / 2,\r\n    l: 40,\r\n    b: 10,\r\n    h: 60\r\n  };\r\n    spinItem(item, 5);\r\n  unspinItem(item);\r\n    const material = item.myRotationConstraints === 7\r\n          ? untiltable\r\n          : item.myPositionConstraints === 2\r\n            ? unstackable\r\n            : plain;*/\n\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 573\n    },\n    __self: this\n  }, React.createElement(\"orbitControls\", {\n    args: [camera, gl.domElement],\n    enableDamping: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 574\n    },\n    __self: this\n  }), React.createElement(\"group\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 575\n    },\n    __self: this\n  }, uld.contour.faces.map(face => React.createElement(\"line\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 577\n    },\n    __self: this\n  }, React.createElement(\"geometry\", {\n    attach: \"geometry\",\n    vertices: face.points.map(point => new THREE.Vector3(point.x, point.y, point.z)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 578\n    },\n    __self: this\n  }), React.createElement(\"lineBasicMaterial\", {\n    attach: \"material\",\n    color: \"#8A8A8A\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 582\n    },\n    __self: this\n  })))), (subBins || []).map(subBin => {\n    return React.createElement(\"mesh\", {\n      position: [subBin.x + subBin.cornerCoord.x, subBin.y, subBin],\n      color: \"#CECECE\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587\n      },\n      __self: this\n    }, React.createElement(\"boxBufferGeometry\", {\n      attach: \"geometry\",\n      args: [subBin.l, subBin.b, subBin.h],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 588\n      },\n      __self: this\n    }));\n  }), items.map(item => {\n    const material = item.myRotationConstraints === 7 ? untiltable : item.myPositionConstraints === 2 ? unstackable : plain;\n    return React.createElement(\"mesh\", {\n      position: [item.x, item.y, item.z],\n      material: material,\n      onClick: e => alert(item.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 603\n      },\n      __self: this\n    }, React.createElement(\"boxBufferGeometry\", {\n      attach: \"geometry\",\n      args: [item.l, item.b, item.h],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 608\n      },\n      __self: this\n    }), item.heavy && React.createElement(\"meshBasicMaterial\", {\n      attach: \"material\",\n      color: \"red\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 612\n      },\n      __self: this\n    }), item.unstackable && React.createElement(\"meshBasicMaterial\", {\n      attach: \"material\",\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613\n      },\n      __self: this\n    }));\n  }));\n};\n\nitems = pack(items).items;\n/*let newItems = [\r\n  {\"id\":12,\"l\":40,\"b\":37,\"h\":38,\"weight\":17.512055393515897},\r\n  {\"id\":96,\"l\":36,\"b\":38,\"h\":39,\"weight\":26.703374934395853, unstackable: true},\r\n  {\"id\":21,\"l\":36,\"b\":37,\"h\":39,\"weight\":22.691877999126895, unstackable: true},\r\n  {\"id\":35,\"l\":32,\"b\":39,\"h\":38,\"weight\":7.076429841596443, unstackable: true},\r\n  {\"id\":7,\"l\":32,\"b\":37,\"h\":37,\"weight\":25.01681973005458, unstackable: true},\r\n  {\"id\":66,\"l\":37,\"b\":32,\"h\":37,\"weight\":16.93326049314387, unstackable: true},\r\n  {\"id\":6,\"l\":25,\"b\":21,\"h\":21,\"weight\":12.980079999287524, unstackable: true},\r\n  {\"id\":60,\"l\":27,\"b\":21,\"h\":22,\"weight\":13.71305998672768, unstackable: true},\r\n  {\"id\":41,\"l\":27,\"b\":23,\"h\":21,\"weight\":19.971004273977485, unstackable: true},\r\n  {\"id\":45,\"l\":27,\"b\":24,\"h\":22,\"weight\":15.690667821632571, unstackable: true},\r\n  {\"id\":8,\"l\":27,\"b\":21,\"h\":26,\"weight\":3.741435966054032, unstackable: true},{\"id\":61,\"l\":23,\"b\":26,\"h\":25,\"weight\":18.571232311441438},{\"id\":89,\"l\":21,\"b\":35,\"h\":21,\"weight\":3.8835760272165976},{\"id\":39,\"l\":21,\"b\":24,\"h\":31,\"weight\":18.14821319246191},{\"id\":11,\"l\":26,\"b\":28,\"h\":23,\"weight\":5.91564583675988},{\"id\":38,\"l\":27,\"b\":21,\"h\":30,\"weight\":14.592157825059067},{\"id\":50,\"l\":21,\"b\":22,\"h\":38,\"weight\":29.715900582492797,\"heavy\":true},{\"id\":69,\"l\":32,\"b\":24,\"h\":23,\"weight\":17.12318864349656},{\"id\":64,\"l\":31,\"b\":25,\"h\":23,\"weight\":28.424008716024396,\"heavy\":true},{\"id\":5,\"l\":21,\"b\":25,\"h\":34,\"weight\":25.969313393902155},{\"id\":27,\"l\":36,\"b\":21,\"h\":24,\"weight\":20.262957384215298},{\"id\":90,\"l\":23,\"b\":21,\"h\":38,\"weight\":18.55234432630118},{\"id\":92,\"l\":22,\"b\":28,\"h\":30,\"weight\":9.171915053595391},{\"id\":47,\"l\":30,\"b\":22,\"h\":28,\"weight\":16.697730285722074},{\"id\":58,\"l\":22,\"b\":39,\"h\":22,\"weight\":13.47099258257317},{\"id\":73,\"l\":23,\"b\":38,\"h\":22,\"weight\":4.038086801856224},{\"id\":19,\"l\":25,\"b\":35,\"h\":22,\"weight\":14.474375699587071},{\"id\":63,\"l\":28,\"b\":28,\"h\":25,\"weight\":23.184998954408425},{\"id\":18,\"l\":28,\"b\":32,\"h\":22,\"weight\":11.364336818339147},{\"id\":70,\"l\":25,\"b\":25,\"h\":32,\"weight\":14.57784845840147},{\"id\":97,\"l\":23,\"b\":22,\"h\":40,\"weight\":3.2404087035059748},{\"id\":0,\"l\":22,\"b\":26,\"h\":36,\"weight\":16.093665484613155},{\"id\":20,\"l\":32,\"b\":28,\"h\":23,\"weight\":6.105939599542991},{\"id\":94,\"l\":27,\"b\":35,\"h\":22,\"weight\":4.415246868746678},{\"id\":9,\"l\":27,\"b\":23,\"h\":34,\"weight\":1.946753195940969},{\"id\":93,\"l\":31,\"b\":22,\"h\":32,\"weight\":21.50995442856736},{\"id\":2,\"l\":27,\"b\":27,\"h\":30,\"weight\":17.667366202642995},{\"id\":71,\"l\":27,\"b\":33,\"h\":25,\"weight\":15.75517438921587},{\"id\":76,\"l\":21,\"b\":28,\"h\":38,\"weight\":7.429303206362379},{\"id\":49,\"l\":24,\"b\":24,\"h\":39,\"weight\":11.478326197037989},{\"id\":78,\"l\":22,\"b\":38,\"h\":27,\"weight\":18.455676524076893},{\"id\":88,\"l\":26,\"b\":35,\"h\":25,\"weight\":0.9699530053335081},{\"id\":33,\"l\":34,\"b\":21,\"h\":32,\"weight\":24.239957400704938},{\"id\":86,\"l\":25,\"b\":23,\"h\":40,\"weight\":18.09549907898296},{\"id\":4,\"l\":37,\"b\":24,\"h\":26,\"weight\":9.487921863035343},{\"id\":81,\"l\":25,\"b\":30,\"h\":31,\"weight\":9.139865840818096},{\"id\":43,\"l\":30,\"b\":26,\"h\":30,\"weight\":24.26232930816665},{\"id\":68,\"l\":28,\"b\":35,\"h\":24,\"weight\":9.005780799160242},{\"id\":84,\"l\":37,\"b\":22,\"h\":29,\"weight\":0.6178611192579386},{\"id\":77,\"l\":32,\"b\":34,\"h\":22,\"weight\":18.64229377819448},{\"id\":53,\"l\":35,\"b\":30,\"h\":23,\"weight\":26.496847353834493},{\"id\":56,\"l\":33,\"b\":31,\"h\":24,\"weight\":29.59836014297159,\"heavy\":true},{\"id\":74,\"l\":30,\"b\":35,\"h\":24,\"weight\":8.960694713923294},{\"id\":28,\"l\":34,\"b\":34,\"h\":22,\"weight\":15.369934327427465},{\"id\":3,\"l\":34,\"b\":27,\"h\":28,\"weight\":18.701171432157967},{\"id\":30,\"l\":37,\"b\":28,\"h\":25,\"weight\":15.077440069070096},{\"id\":46,\"l\":40,\"b\":24,\"h\":27,\"weight\":3.6163665769692144},{\"id\":67,\"l\":35,\"b\":24,\"h\":31,\"weight\":7.771779026714247},{\"id\":24,\"l\":35,\"b\":24,\"h\":31,\"weight\":25.270931113697404},{\"id\":23,\"l\":31,\"b\":30,\"h\":29,\"weight\":26.11981924304361},{\"id\":40,\"l\":39,\"b\":24,\"h\":29,\"weight\":0.16539321499317472},{\"id\":95,\"l\":35,\"b\":29,\"h\":27,\"weight\":17.64554744051333},{\"id\":42,\"l\":25,\"b\":38,\"h\":29,\"weight\":12.175004168843515},{\"id\":14,\"l\":28,\"b\":38,\"h\":26,\"weight\":11.61484399237407},{\"id\":65,\"l\":36,\"b\":37,\"h\":21,\"weight\":19.21840474585028},{\"id\":57,\"l\":27,\"b\":37,\"h\":28,\"weight\":26.63980839091846},{\"id\":16,\"l\":28,\"b\":35,\"h\":29,\"weight\":9.483466791065275},{\"id\":1,\"l\":33,\"b\":32,\"h\":27,\"weight\":10.8357904803525},{\"id\":37,\"l\":25,\"b\":36,\"h\":32,\"weight\":28.51016057956189,\"heavy\":true},{\"id\":79,\"l\":33,\"b\":34,\"h\":26,\"weight\":0.5838271763078984},{\"id\":83,\"l\":36,\"b\":22,\"h\":37,\"weight\":3.056265603933983},{\"id\":51,\"l\":33,\"b\":34,\"h\":28,\"weight\":26.309137613438892},{\"id\":85,\"l\":31,\"b\":32,\"h\":32,\"weight\":14.350839133465891},{\"id\":98,\"l\":30,\"b\":37,\"h\":29,\"weight\":11.61732623812642},{\"id\":82,\"l\":35,\"b\":40,\"h\":23,\"weight\":23.706833725894324},{\"id\":72,\"l\":29,\"b\":29,\"h\":39,\"weight\":29.30913974926043,\"heavy\":true},{\"id\":91,\"l\":29,\"b\":30,\"h\":38,\"weight\":3.5865122975081265},{\"id\":52,\"l\":35,\"b\":26,\"h\":37,\"weight\":4.839286663491098},{\"id\":13,\"l\":37,\"b\":24,\"h\":38,\"weight\":17.657981490529153},{\"id\":75,\"l\":32,\"b\":36,\"h\":30,\"weight\":8.687703545766501},{\"id\":55,\"l\":36,\"b\":37,\"h\":26,\"weight\":22.48762302159906},{\"id\":99,\"l\":38,\"b\":38,\"h\":24,\"weight\":19.741663999555584},{\"id\":31,\"l\":32,\"b\":35,\"h\":31,\"weight\":13.00040714591772},{\"id\":36,\"l\":28,\"b\":40,\"h\":31,\"weight\":25.949981233693073},{\"id\":87,\"l\":32,\"b\":34,\"h\":32,\"weight\":15.374188710865752},{\"id\":32,\"l\":25,\"b\":38,\"h\":37,\"weight\":20.074620049181867},{\"id\":54,\"l\":34,\"b\":26,\"h\":40,\"weight\":19.532050152956128},{\"id\":48,\"l\":40,\"b\":36,\"h\":25,\"weight\":13.67986502429352},{\"id\":22,\"l\":40,\"b\":36,\"h\":25,\"weight\":27.222715994183154,\"heavy\":true},{\"id\":25,\"l\":37,\"b\":39,\"h\":26,\"weight\":9.020129036788646},{\"id\":59,\"l\":37,\"b\":40,\"h\":26,\"weight\":26.608004530686173},{\"id\":34,\"l\":37,\"b\":29,\"h\":36,\"weight\":9.62276092234049},{\"id\":15,\"l\":25,\"b\":40,\"h\":39,\"weight\":13.605066733913336},{\"id\":62,\"l\":33,\"b\":37,\"h\":32,\"weight\":6.350320915044552},{\"id\":44,\"l\":38,\"b\":39,\"h\":27,\"weight\":10.825609761402571},{\"id\":29,\"l\":38,\"b\":32,\"h\":33,\"weight\":27.38340114782676,\"heavy\":true},{\"id\":17,\"l\":30,\"b\":34,\"h\":40,\"weight\":11.063160950866195},{\"id\":10,\"l\":38,\"b\":32,\"h\":34,\"weight\":28.055240502714952,\"heavy\":true},{\"id\":80,\"l\":34,\"b\":40,\"h\":32,\"weight\":8.298644465320608},{\"id\":26,\"l\":31,\"b\":36,\"h\":39,\"weight\":27.157963021699658,\"heavy\":true}];\r\n\r\nnewItems.forEach(_ => _.spinnable = true);*/\n//let newItems = require('./input1.json');\n// Thin\n//let newItems = [{\"id\":0,\"l\":27,\"b\":30,\"h\":37,\"weight\":23.8243824415764,\"spinnable\":true,\"unstackable\":false},{\"id\":1,\"l\":24,\"b\":25,\"h\":40,\"weight\":24.19723690787775,\"spinnable\":true,\"unstackable\":false},{\"id\":2,\"l\":22,\"b\":24,\"h\":35,\"weight\":29.171157759232564,\"spinnable\":true,\"unstackable\":false},{\"id\":3,\"l\":23,\"b\":27,\"h\":21,\"weight\":22.785189966281052,\"spinnable\":true,\"unstackable\":false},{\"id\":4,\"l\":21,\"b\":34,\"h\":22,\"weight\":9.95839134825328,\"spinnable\":true,\"unstackable\":false},{\"id\":5,\"l\":26,\"b\":29,\"h\":21,\"weight\":19.47137816799697,\"spinnable\":true,\"unstackable\":false},{\"id\":6,\"l\":40,\"b\":33,\"h\":40,\"weight\":13.956884628026174,\"spinnable\":true,\"unstackable\":true},{\"id\":7,\"l\":35,\"b\":37,\"h\":35,\"weight\":23.192830844833562,\"spinnable\":true,\"unstackable\":true},{\"id\":8,\"l\":40,\"b\":33,\"h\":35,\"weight\":4.459304635675467,\"spinnable\":true,\"unstackable\":false},{\"id\":9,\"l\":25,\"b\":31,\"h\":26,\"weight\":0.8697855663563958,\"spinnable\":true,\"unstackable\":false},{\"id\":10,\"l\":29,\"b\":28,\"h\":35,\"weight\":23.69631724494008,\"spinnable\":true,\"unstackable\":false},{\"id\":11,\"l\":25,\"b\":26,\"h\":24,\"weight\":11.552444275721857,\"spinnable\":true,\"unstackable\":false},{\"id\":12,\"l\":28,\"b\":36,\"h\":27,\"weight\":3.3680129558021132,\"spinnable\":true,\"unstackable\":false},{\"id\":13,\"l\":40,\"b\":32,\"h\":35,\"weight\":2.33135335134127,\"spinnable\":true,\"unstackable\":false},{\"id\":14,\"l\":29,\"b\":26,\"h\":25,\"weight\":17.7970786560673,\"spinnable\":true,\"unstackable\":false},{\"id\":15,\"l\":24,\"b\":33,\"h\":38,\"weight\":11.240342862932806,\"spinnable\":true,\"unstackable\":false},{\"id\":16,\"l\":35,\"b\":24,\"h\":22,\"weight\":12.138284983033907,\"spinnable\":true,\"unstackable\":false},{\"id\":17,\"l\":32,\"b\":30,\"h\":38,\"weight\":4.6695800163602,\"spinnable\":true,\"unstackable\":false},{\"id\":18,\"l\":26,\"b\":25,\"h\":29,\"weight\":29.722640918637627,\"spinnable\":true,\"unstackable\":false},{\"id\":19,\"l\":40,\"b\":39,\"h\":31,\"weight\":24.86821805050382,\"spinnable\":true,\"unstackable\":false},{\"id\":20,\"l\":23,\"b\":38,\"h\":21,\"weight\":14.619968912310085,\"spinnable\":true,\"unstackable\":true},{\"id\":21,\"l\":30,\"b\":34,\"h\":22,\"weight\":27.850761836439805,\"spinnable\":true,\"unstackable\":false},{\"id\":22,\"l\":35,\"b\":33,\"h\":22,\"weight\":13.890810204513254,\"spinnable\":true,\"unstackable\":false},{\"id\":23,\"l\":28,\"b\":30,\"h\":31,\"weight\":10.311343132069041,\"spinnable\":true,\"unstackable\":false},{\"id\":24,\"l\":21,\"b\":39,\"h\":26,\"weight\":28.12506938444379,\"spinnable\":true,\"unstackable\":false},{\"id\":25,\"l\":24,\"b\":32,\"h\":29,\"weight\":19.565167282107396,\"spinnable\":true,\"unstackable\":false},{\"id\":26,\"l\":23,\"b\":31,\"h\":30,\"weight\":28.988549408655516,\"spinnable\":true,\"unstackable\":false},{\"id\":27,\"l\":27,\"b\":31,\"h\":30,\"weight\":9.104639088133004,\"spinnable\":true,\"unstackable\":false},{\"id\":28,\"l\":23,\"b\":30,\"h\":33,\"weight\":23.854778877556203,\"spinnable\":true,\"unstackable\":false},{\"id\":29,\"l\":21,\"b\":28,\"h\":30,\"weight\":0.5309597179832526,\"spinnable\":true,\"unstackable\":false},{\"id\":30,\"l\":21,\"b\":40,\"h\":29,\"weight\":15.147503842887083,\"spinnable\":true,\"unstackable\":true},{\"id\":31,\"l\":29,\"b\":29,\"h\":27,\"weight\":4.0661973065357015,\"spinnable\":true,\"unstackable\":false},{\"id\":32,\"l\":24,\"b\":31,\"h\":29,\"weight\":20.43277483772848,\"spinnable\":true,\"unstackable\":false},{\"id\":33,\"l\":37,\"b\":22,\"h\":36,\"weight\":6.777035598472283,\"spinnable\":true,\"unstackable\":false},{\"id\":34,\"l\":30,\"b\":39,\"h\":36,\"weight\":12.037948757711188,\"spinnable\":true,\"unstackable\":true},{\"id\":35,\"l\":39,\"b\":24,\"h\":33,\"weight\":9.204916326738319,\"spinnable\":true,\"unstackable\":false},{\"id\":36,\"l\":21,\"b\":28,\"h\":40,\"weight\":9.693379398331976,\"spinnable\":true,\"unstackable\":false},{\"id\":37,\"l\":33,\"b\":38,\"h\":22,\"weight\":15.86285487431782,\"spinnable\":true,\"unstackable\":false},{\"id\":38,\"l\":31,\"b\":40,\"h\":22,\"weight\":10.241082483988983,\"spinnable\":true,\"unstackable\":false},{\"id\":39,\"l\":21,\"b\":21,\"h\":34,\"weight\":15.67076627173477,\"spinnable\":true,\"unstackable\":false},{\"id\":40,\"l\":24,\"b\":25,\"h\":22,\"weight\":27.895331136912855,\"spinnable\":true,\"unstackable\":false},{\"id\":41,\"l\":21,\"b\":28,\"h\":28,\"weight\":25.757697189071756,\"spinnable\":true,\"unstackable\":false},{\"id\":42,\"l\":26,\"b\":30,\"h\":26,\"weight\":5.552416233944513,\"spinnable\":true,\"unstackable\":false},{\"id\":43,\"l\":37,\"b\":28,\"h\":38,\"weight\":2.7302499043669792,\"spinnable\":true,\"unstackable\":false},{\"id\":44,\"l\":36,\"b\":40,\"h\":40,\"weight\":23.66883275584508,\"spinnable\":true,\"unstackable\":false},{\"id\":45,\"l\":25,\"b\":39,\"h\":36,\"weight\":13.705050572168776,\"spinnable\":true,\"unstackable\":false},{\"id\":46,\"l\":25,\"b\":21,\"h\":40,\"weight\":9.570352841485994,\"spinnable\":true,\"unstackable\":false},{\"id\":47,\"l\":40,\"b\":37,\"h\":21,\"weight\":23.694206704883857,\"spinnable\":true,\"unstackable\":false},{\"id\":48,\"l\":25,\"b\":40,\"h\":37,\"weight\":23.607284294845595,\"spinnable\":true,\"unstackable\":false},{\"id\":49,\"l\":23,\"b\":31,\"h\":28,\"weight\":16.91424458327872,\"spinnable\":true,\"unstackable\":false},{\"id\":50,\"l\":27,\"b\":25,\"h\":32,\"weight\":24.184479677788705,\"spinnable\":true,\"unstackable\":false},{\"id\":51,\"l\":26,\"b\":32,\"h\":40,\"weight\":18.980955101831565,\"spinnable\":true,\"unstackable\":false},{\"id\":52,\"l\":35,\"b\":37,\"h\":32,\"weight\":25.040706108000876,\"spinnable\":true,\"unstackable\":false},{\"id\":53,\"l\":40,\"b\":28,\"h\":25,\"weight\":12.795393584908954,\"spinnable\":true,\"unstackable\":false},{\"id\":54,\"l\":37,\"b\":39,\"h\":21,\"weight\":9.677237734468864,\"spinnable\":true,\"unstackable\":false},{\"id\":55,\"l\":40,\"b\":25,\"h\":26,\"weight\":15.288498245087968,\"spinnable\":true,\"unstackable\":false},{\"id\":56,\"l\":29,\"b\":21,\"h\":26,\"weight\":11.612053031746834,\"spinnable\":true,\"unstackable\":false},{\"id\":57,\"l\":24,\"b\":38,\"h\":30,\"weight\":1.0558516088625391,\"spinnable\":true,\"unstackable\":false},{\"id\":58,\"l\":34,\"b\":40,\"h\":22,\"weight\":23.331385361416388,\"spinnable\":true,\"unstackable\":true},{\"id\":59,\"l\":34,\"b\":27,\"h\":22,\"weight\":25.74511254248882,\"spinnable\":true,\"unstackable\":false},{\"id\":60,\"l\":24,\"b\":28,\"h\":37,\"weight\":1.2778237657838787,\"spinnable\":true,\"unstackable\":false},{\"id\":61,\"l\":29,\"b\":33,\"h\":36,\"weight\":3.4189831500297574,\"spinnable\":true,\"unstackable\":false},{\"id\":62,\"l\":33,\"b\":31,\"h\":26,\"weight\":6.59874363845558,\"spinnable\":true,\"unstackable\":true},{\"id\":63,\"l\":27,\"b\":23,\"h\":30,\"weight\":7.660088863188044,\"spinnable\":true,\"unstackable\":false},{\"id\":64,\"l\":24,\"b\":25,\"h\":30,\"weight\":20.936317023318882,\"spinnable\":true,\"unstackable\":true},{\"id\":65,\"l\":39,\"b\":36,\"h\":23,\"weight\":25.68739595498892,\"spinnable\":true,\"unstackable\":false},{\"id\":66,\"l\":26,\"b\":24,\"h\":36,\"weight\":8.785644354594693,\"spinnable\":true,\"unstackable\":false},{\"id\":67,\"l\":24,\"b\":26,\"h\":33,\"weight\":11.094059931953304,\"spinnable\":true,\"unstackable\":false},{\"id\":68,\"l\":37,\"b\":31,\"h\":38,\"weight\":9.321486670842718,\"spinnable\":true,\"unstackable\":false},{\"id\":69,\"l\":25,\"b\":32,\"h\":21,\"weight\":25.69819577001019,\"spinnable\":true,\"unstackable\":false},{\"id\":70,\"l\":38,\"b\":28,\"h\":26,\"weight\":1.7986507266475482,\"spinnable\":true,\"unstackable\":false},{\"id\":71,\"l\":24,\"b\":36,\"h\":40,\"weight\":3.080008941299668,\"spinnable\":true,\"unstackable\":false},{\"id\":72,\"l\":37,\"b\":23,\"h\":23,\"weight\":19.50192913546031,\"spinnable\":true,\"unstackable\":false},{\"id\":73,\"l\":40,\"b\":22,\"h\":21,\"weight\":23.388158737319632,\"spinnable\":true,\"unstackable\":false},{\"id\":74,\"l\":39,\"b\":34,\"h\":40,\"weight\":19.847365397111453,\"spinnable\":true,\"unstackable\":false},{\"id\":75,\"l\":40,\"b\":29,\"h\":34,\"weight\":18.979412438525202,\"spinnable\":true,\"unstackable\":false},{\"id\":76,\"l\":39,\"b\":24,\"h\":32,\"weight\":24.894770334246147,\"spinnable\":true,\"unstackable\":false},{\"id\":77,\"l\":27,\"b\":40,\"h\":34,\"weight\":15.478405452858441,\"spinnable\":true,\"unstackable\":false},{\"id\":78,\"l\":31,\"b\":31,\"h\":28,\"weight\":29.37979494172893,\"spinnable\":true,\"unstackable\":false},{\"id\":79,\"l\":24,\"b\":35,\"h\":32,\"weight\":10.740385595370704,\"spinnable\":true,\"unstackable\":true},{\"id\":80,\"l\":30,\"b\":40,\"h\":36,\"weight\":8.059603701569573,\"spinnable\":true,\"unstackable\":false},{\"id\":81,\"l\":23,\"b\":39,\"h\":40,\"weight\":13.06278833760581,\"spinnable\":true,\"unstackable\":false},{\"id\":82,\"l\":33,\"b\":31,\"h\":33,\"weight\":25.35928755678367,\"spinnable\":true,\"unstackable\":false},{\"id\":83,\"l\":30,\"b\":22,\"h\":21,\"weight\":24.881923649531863,\"spinnable\":true,\"unstackable\":false},{\"id\":84,\"l\":37,\"b\":36,\"h\":27,\"weight\":27.39252999571513,\"spinnable\":true,\"unstackable\":false},{\"id\":85,\"l\":36,\"b\":28,\"h\":38,\"weight\":10.79231821355978,\"spinnable\":true,\"unstackable\":true},{\"id\":86,\"l\":27,\"b\":29,\"h\":25,\"weight\":8.420832772919521,\"spinnable\":true,\"unstackable\":false},{\"id\":87,\"l\":28,\"b\":30,\"h\":38,\"weight\":0.35878876682817307,\"spinnable\":true,\"unstackable\":false},{\"id\":88,\"l\":34,\"b\":36,\"h\":35,\"weight\":27.89527064295339,\"spinnable\":true,\"unstackable\":false},{\"id\":89,\"l\":36,\"b\":39,\"h\":23,\"weight\":14.839306011646634,\"spinnable\":true,\"unstackable\":true},{\"id\":90,\"l\":35,\"b\":33,\"h\":27,\"weight\":2.958635262597933,\"spinnable\":true,\"unstackable\":false},{\"id\":91,\"l\":25,\"b\":36,\"h\":28,\"weight\":8.59854917139691,\"spinnable\":true,\"unstackable\":false},{\"id\":92,\"l\":39,\"b\":32,\"h\":22,\"weight\":4.5821202673375705,\"spinnable\":true,\"unstackable\":false},{\"id\":93,\"l\":29,\"b\":38,\"h\":40,\"weight\":5.291723054736055,\"spinnable\":true,\"unstackable\":false},{\"id\":94,\"l\":21,\"b\":33,\"h\":28,\"weight\":28.849311082360167,\"spinnable\":true,\"unstackable\":true},{\"id\":95,\"l\":38,\"b\":23,\"h\":22,\"weight\":4.570698515374505,\"spinnable\":true,\"unstackable\":false},{\"id\":96,\"l\":29,\"b\":40,\"h\":26,\"weight\":16.825154762749893,\"spinnable\":true,\"unstackable\":false},{\"id\":97,\"l\":29,\"b\":39,\"h\":31,\"weight\":7.5276352138148255,\"spinnable\":true,\"unstackable\":false},{\"id\":98,\"l\":26,\"b\":32,\"h\":31,\"weight\":14.934745545818021,\"spinnable\":true,\"unstackable\":false},{\"id\":99,\"l\":40,\"b\":38,\"h\":37,\"weight\":3.1596082057840147,\"spinnable\":true,\"unstackable\":false}];\n// Thicc\n\nlet newItems = [{\n  \"id\": 0,\n  \"l\": 37,\n  \"b\": 36,\n  \"h\": 33,\n  \"weight\": 10.988112023001298,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 1,\n  \"l\": 40,\n  \"b\": 31,\n  \"h\": 31,\n  \"weight\": 13.703375340109243,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 2,\n  \"l\": 34,\n  \"b\": 32,\n  \"h\": 32,\n  \"weight\": 29.042713097124608,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 3,\n  \"l\": 37,\n  \"b\": 40,\n  \"h\": 32,\n  \"weight\": 8.839781028166428,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 4,\n  \"l\": 34,\n  \"b\": 32,\n  \"h\": 34,\n  \"weight\": 3.251097161905596,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 5,\n  \"l\": 37,\n  \"b\": 31,\n  \"h\": 31,\n  \"weight\": 7.174243652141659,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 6,\n  \"l\": 36,\n  \"b\": 34,\n  \"h\": 39,\n  \"weight\": 12.433084036649582,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 7,\n  \"l\": 40,\n  \"b\": 32,\n  \"h\": 32,\n  \"weight\": 6.2653089060356475,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 8,\n  \"l\": 32,\n  \"b\": 39,\n  \"h\": 34,\n  \"weight\": 10.951534008334512,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 9,\n  \"l\": 39,\n  \"b\": 31,\n  \"h\": 35,\n  \"weight\": 19.44885386094845,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 10,\n  \"l\": 36,\n  \"b\": 33,\n  \"h\": 33,\n  \"weight\": 15.177224210335345,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 11,\n  \"l\": 32,\n  \"b\": 32,\n  \"h\": 34,\n  \"weight\": 9.776399094159443,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 12,\n  \"l\": 33,\n  \"b\": 32,\n  \"h\": 39,\n  \"weight\": 11.755233994245117,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 13,\n  \"l\": 35,\n  \"b\": 39,\n  \"h\": 33,\n  \"weight\": 21.385401361090512,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 14,\n  \"l\": 31,\n  \"b\": 39,\n  \"h\": 33,\n  \"weight\": 16.22998205370053,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 15,\n  \"l\": 40,\n  \"b\": 39,\n  \"h\": 36,\n  \"weight\": 4.858776860869478,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 16,\n  \"l\": 37,\n  \"b\": 34,\n  \"h\": 38,\n  \"weight\": 29.985479970523528,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 17,\n  \"l\": 33,\n  \"b\": 38,\n  \"h\": 40,\n  \"weight\": 14.479773938916072,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 18,\n  \"l\": 38,\n  \"b\": 34,\n  \"h\": 37,\n  \"weight\": 21.656654212532228,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 19,\n  \"l\": 38,\n  \"b\": 35,\n  \"h\": 37,\n  \"weight\": 25.31466945946865,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 20,\n  \"l\": 36,\n  \"b\": 33,\n  \"h\": 36,\n  \"weight\": 29.127235671701335,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 21,\n  \"l\": 35,\n  \"b\": 32,\n  \"h\": 31,\n  \"weight\": 24.030347276990124,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 22,\n  \"l\": 32,\n  \"b\": 33,\n  \"h\": 35,\n  \"weight\": 28.13220633803215,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 23,\n  \"l\": 36,\n  \"b\": 40,\n  \"h\": 33,\n  \"weight\": 20.24742214787223,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 24,\n  \"l\": 33,\n  \"b\": 35,\n  \"h\": 36,\n  \"weight\": 14.84357214997004,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 25,\n  \"l\": 38,\n  \"b\": 34,\n  \"h\": 32,\n  \"weight\": 13.685213219639103,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 26,\n  \"l\": 40,\n  \"b\": 34,\n  \"h\": 33,\n  \"weight\": 0.8723397310193204,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 27,\n  \"l\": 32,\n  \"b\": 36,\n  \"h\": 38,\n  \"weight\": 18.915321091619333,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 28,\n  \"l\": 36,\n  \"b\": 39,\n  \"h\": 38,\n  \"weight\": 10.851744026230563,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 29,\n  \"l\": 35,\n  \"b\": 34,\n  \"h\": 36,\n  \"weight\": 11.865213404891264,\n  \"spinnable\": true,\n  \"unstackable\": true\n}, {\n  \"id\": 30,\n  \"l\": 33,\n  \"b\": 37,\n  \"h\": 33,\n  \"weight\": 6.248044582375549,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 31,\n  \"l\": 35,\n  \"b\": 38,\n  \"h\": 38,\n  \"weight\": 9.17050964955704,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 32,\n  \"l\": 37,\n  \"b\": 34,\n  \"h\": 36,\n  \"weight\": 18.150721433002563,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 33,\n  \"l\": 33,\n  \"b\": 35,\n  \"h\": 37,\n  \"weight\": 8.309666928823559,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 34,\n  \"l\": 34,\n  \"b\": 35,\n  \"h\": 39,\n  \"weight\": 27.691152696766814,\n  \"spinnable\": true,\n  \"unstackable\": true\n}, {\n  \"id\": 35,\n  \"l\": 32,\n  \"b\": 39,\n  \"h\": 34,\n  \"weight\": 0.7932463781880439,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 36,\n  \"l\": 39,\n  \"b\": 36,\n  \"h\": 39,\n  \"weight\": 26.093478073363407,\n  \"spinnable\": true,\n  \"unstackable\": true\n}, {\n  \"id\": 37,\n  \"l\": 39,\n  \"b\": 32,\n  \"h\": 33,\n  \"weight\": 1.2735233894945441,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 38,\n  \"l\": 32,\n  \"b\": 31,\n  \"h\": 37,\n  \"weight\": 26.633528821533435,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 39,\n  \"l\": 37,\n  \"b\": 33,\n  \"h\": 37,\n  \"weight\": 21.867765249616816,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 40,\n  \"l\": 38,\n  \"b\": 35,\n  \"h\": 38,\n  \"weight\": 21.46948354422409,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 41,\n  \"l\": 37,\n  \"b\": 31,\n  \"h\": 32,\n  \"weight\": 6.017640257845411,\n  \"spinnable\": true,\n  \"unstackable\": true\n}, {\n  \"id\": 42,\n  \"l\": 39,\n  \"b\": 34,\n  \"h\": 32,\n  \"weight\": 10.72196824276742,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 43,\n  \"l\": 38,\n  \"b\": 40,\n  \"h\": 33,\n  \"weight\": 14.031503840209826,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 44,\n  \"l\": 34,\n  \"b\": 32,\n  \"h\": 40,\n  \"weight\": 25.059623923371145,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 45,\n  \"l\": 39,\n  \"b\": 39,\n  \"h\": 37,\n  \"weight\": 3.4314437234692763,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 46,\n  \"l\": 39,\n  \"b\": 38,\n  \"h\": 39,\n  \"weight\": 1.3516047614056248,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 47,\n  \"l\": 36,\n  \"b\": 40,\n  \"h\": 36,\n  \"weight\": 13.614577990421697,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 48,\n  \"l\": 32,\n  \"b\": 36,\n  \"h\": 32,\n  \"weight\": 5.25384893947356,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 49,\n  \"l\": 33,\n  \"b\": 31,\n  \"h\": 39,\n  \"weight\": 18.346098229988975,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 50,\n  \"l\": 40,\n  \"b\": 38,\n  \"h\": 38,\n  \"weight\": 16.97974738966603,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 51,\n  \"l\": 31,\n  \"b\": 34,\n  \"h\": 37,\n  \"weight\": 12.515503102341533,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 52,\n  \"l\": 35,\n  \"b\": 37,\n  \"h\": 35,\n  \"weight\": 29.673056310617806,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 53,\n  \"l\": 39,\n  \"b\": 34,\n  \"h\": 34,\n  \"weight\": 10.204513769034351,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 54,\n  \"l\": 35,\n  \"b\": 32,\n  \"h\": 40,\n  \"weight\": 27.514475994795927,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 55,\n  \"l\": 31,\n  \"b\": 37,\n  \"h\": 40,\n  \"weight\": 4.244292875514999,\n  \"spinnable\": true,\n  \"unstackable\": true\n}, {\n  \"id\": 56,\n  \"l\": 39,\n  \"b\": 34,\n  \"h\": 37,\n  \"weight\": 18.127025040903874,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 57,\n  \"l\": 37,\n  \"b\": 33,\n  \"h\": 33,\n  \"weight\": 24.83927533545364,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 58,\n  \"l\": 38,\n  \"b\": 32,\n  \"h\": 33,\n  \"weight\": 18.46349861299258,\n  \"spinnable\": true,\n  \"unstackable\": true\n}, {\n  \"id\": 59,\n  \"l\": 32,\n  \"b\": 31,\n  \"h\": 40,\n  \"weight\": 25.98771589288722,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 60,\n  \"l\": 37,\n  \"b\": 34,\n  \"h\": 37,\n  \"weight\": 2.723034742005006,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 61,\n  \"l\": 38,\n  \"b\": 39,\n  \"h\": 32,\n  \"weight\": 13.085985957825216,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 62,\n  \"l\": 32,\n  \"b\": 37,\n  \"h\": 31,\n  \"weight\": 27.41883698646971,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 63,\n  \"l\": 31,\n  \"b\": 40,\n  \"h\": 32,\n  \"weight\": 28.353349821679707,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 64,\n  \"l\": 40,\n  \"b\": 31,\n  \"h\": 34,\n  \"weight\": 21.554916554061226,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 65,\n  \"l\": 31,\n  \"b\": 33,\n  \"h\": 34,\n  \"weight\": 22.899916191234094,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 66,\n  \"l\": 40,\n  \"b\": 33,\n  \"h\": 37,\n  \"weight\": 0.9658442078983343,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 67,\n  \"l\": 36,\n  \"b\": 33,\n  \"h\": 40,\n  \"weight\": 26.431299122806486,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 68,\n  \"l\": 40,\n  \"b\": 35,\n  \"h\": 36,\n  \"weight\": 14.086151933933408,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 69,\n  \"l\": 40,\n  \"b\": 33,\n  \"h\": 36,\n  \"weight\": 28.786451181068646,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 70,\n  \"l\": 38,\n  \"b\": 36,\n  \"h\": 34,\n  \"weight\": 14.401168016889347,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 71,\n  \"l\": 34,\n  \"b\": 34,\n  \"h\": 31,\n  \"weight\": 20.624617102701272,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 72,\n  \"l\": 39,\n  \"b\": 33,\n  \"h\": 31,\n  \"weight\": 12.348702110189674,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 73,\n  \"l\": 36,\n  \"b\": 31,\n  \"h\": 33,\n  \"weight\": 22.519806610000064,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 74,\n  \"l\": 35,\n  \"b\": 35,\n  \"h\": 35,\n  \"weight\": 2.0856462822525845,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 75,\n  \"l\": 33,\n  \"b\": 40,\n  \"h\": 36,\n  \"weight\": 27.990722754394454,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 76,\n  \"l\": 32,\n  \"b\": 36,\n  \"h\": 36,\n  \"weight\": 18.817268558191532,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 77,\n  \"l\": 39,\n  \"b\": 35,\n  \"h\": 34,\n  \"weight\": 3.6286696613380154,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 78,\n  \"l\": 37,\n  \"b\": 31,\n  \"h\": 32,\n  \"weight\": 28.976485958073003,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 79,\n  \"l\": 31,\n  \"b\": 39,\n  \"h\": 38,\n  \"weight\": 28.798699436241478,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 80,\n  \"l\": 40,\n  \"b\": 34,\n  \"h\": 31,\n  \"weight\": 17.29985869106794,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 81,\n  \"l\": 33,\n  \"b\": 38,\n  \"h\": 36,\n  \"weight\": 7.18810015995988,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 82,\n  \"l\": 40,\n  \"b\": 40,\n  \"h\": 34,\n  \"weight\": 23.233776932016635,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 83,\n  \"l\": 37,\n  \"b\": 33,\n  \"h\": 38,\n  \"weight\": 25.028919631776798,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 84,\n  \"l\": 34,\n  \"b\": 35,\n  \"h\": 35,\n  \"weight\": 0.6175231189715991,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 85,\n  \"l\": 33,\n  \"b\": 34,\n  \"h\": 33,\n  \"weight\": 29.081898069395486,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 86,\n  \"l\": 35,\n  \"b\": 35,\n  \"h\": 33,\n  \"weight\": 1.890561163184299,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 87,\n  \"l\": 39,\n  \"b\": 40,\n  \"h\": 34,\n  \"weight\": 26.244579989863276,\n  \"spinnable\": true,\n  \"unstackable\": true\n}, {\n  \"id\": 88,\n  \"l\": 32,\n  \"b\": 37,\n  \"h\": 33,\n  \"weight\": 14.907347945892882,\n  \"spinnable\": true,\n  \"unstackable\": true\n}, {\n  \"id\": 89,\n  \"l\": 38,\n  \"b\": 37,\n  \"h\": 36,\n  \"weight\": 28.32519684267538,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 90,\n  \"l\": 38,\n  \"b\": 39,\n  \"h\": 37,\n  \"weight\": 13.634675781858096,\n  \"spinnable\": true,\n  \"unstackable\": true\n}, {\n  \"id\": 91,\n  \"l\": 32,\n  \"b\": 33,\n  \"h\": 40,\n  \"weight\": 5.6985629198398735,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 92,\n  \"l\": 37,\n  \"b\": 38,\n  \"h\": 37,\n  \"weight\": 20.16822254546985,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 93,\n  \"l\": 36,\n  \"b\": 32,\n  \"h\": 33,\n  \"weight\": 11.47233772694033,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 94,\n  \"l\": 38,\n  \"b\": 37,\n  \"h\": 34,\n  \"weight\": 10.336963099422487,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 95,\n  \"l\": 37,\n  \"b\": 31,\n  \"h\": 31,\n  \"weight\": 24.02771542188681,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 96,\n  \"l\": 39,\n  \"b\": 35,\n  \"h\": 35,\n  \"weight\": 18.31038758619801,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 97,\n  \"l\": 32,\n  \"b\": 40,\n  \"h\": 31,\n  \"weight\": 23.009363573391436,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 98,\n  \"l\": 31,\n  \"b\": 31,\n  \"h\": 39,\n  \"weight\": 6.610278598775721,\n  \"spinnable\": true,\n  \"unstackable\": false\n}, {\n  \"id\": 99,\n  \"l\": 34,\n  \"b\": 39,\n  \"h\": 38,\n  \"weight\": 1.5676067222083412,\n  \"spinnable\": true,\n  \"unstackable\": false\n}];\n/*let newItems = Array(100).fill(true).map((_, id) => {\r\n  const d = Math.ceil(Math.random() * 30)\r\n  return {\r\n    id,\r\n    l: Math.ceil(Math.random() * 10) + 30,\r\n    b: Math.ceil(Math.random() * 10) + 30,\r\n    h: Math.ceil(Math.random() * 10) + 30,\r\n    weight: Math.random() * 30,\r\n    spinnable: true,\r\n    unstackable: Math.floor(Math.random() * 6) === 0\r\n  }\r\n});\r\n\r\nconsole.log('items');\r\nconsole.log(JSON.stringify(newItems));*/\n\n/*let newItems = Array(100).fill(true).map((_, id) => {\r\n  const d = Math.ceil(Math.random() * 20) + 20\r\n  return {\r\n    id,\r\n    l: d,\r\n    b: d,\r\n    h: d,\r\n    weight: Math.random() * 30,\r\n    spinnable: true\r\n  }\r\n});*/\n\nwindow.newItems = newItems;\n/*newItems.sort((a, b) => a.weight < b.weight ? 1 : -1)\r\n  .forEach((item, i) => {\r\n    if (i < 5) {\r\n      item.heavy = true;\r\n    }\r\n  });*/\n\nsortItemsByVolume(newItems);\ndebugger;\nnewItems = putNHeaviestItemsFirst(newItems);\nnewItems.reverse();\ndebugger; //newItems[94] = {\"id\":66,\"l\":37,\"b\":10,\"h\":50,\"weight\":16.93326049314387};\n\n/*const newItems = sortItemsByVolume(Array(200).fill(true).map(() => ({\r\n  l: Math.random() * 50,\r\n  b: Math.random() * 50,\r\n  h: Math.random() * 50,\r\n})));*/\n\nexport default (() => {\n  const _useState = useState([]),\n        _useState2 = _slicedToArray(_useState, 2),\n        ulds = _useState2[0],\n        setUlds = _useState2[1];\n  /*useEffect(() => {\r\n   debugger;\r\n    fetch('http://localhost:8080/pack', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(d)\r\n    }).then(data => {\r\n      data.json().then(data => setUlds(data))\r\n    });\r\n  }, []);*/\n\n  /*const subBins = [{\r\n    x: -122 + 40 + (244 - 40) / 2,\r\n    y: -81.5 + 45 / 2,\r\n    z: -81.5 + 163 / 2,\r\n    l: 244 - 40,\r\n    b: 45,\r\n    h: 163\r\n  }];*/\n\n\n  const _useState3 = useState(items),\n        _useState4 = _slicedToArray(_useState3, 2),\n        _items = _useState4[0],\n        setItems = _useState4[1];\n\n  const addItem = () => {\n    const nextItem = newItems.pop();\n\n    if (nextItem) {\n      items = items.concat(nextItem);\n      items.forEach(_ => _.packed = false);\n      let result = pack(items);\n      console.dir(result.items);\n      items = result.items;\n      setItems(result.items);\n\n      if (newItems.length > 0) {} //setTimeout(addItem, 100);\n\n      /*else while (items.filter(_ => !_.packed).length !== 0) {debugger;\r\n        result = pack(items);\r\n        items = result.items;\r\n      }*/\n\n    }\n  };\n\n  const packedItems = _items.filter(_ => _.packed);\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 759\n    },\n    __self: this\n  }, \"Bins: \", bins.length, \"Pack status: \", packedItems.length, \" / \", _items.length, ' ', \"Occupancy: \", packedItems.reduce((acc, i) => acc + i.l * i.b * i.h, 0) / (244 * 163 * 163) * 100), shape.map(uld => React.createElement(Canvas, {\n    style: style,\n    camera: camera,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 765\n    },\n    __self: this\n  }, React.createElement(ULDScene, {\n    uld: uld,\n    items: _items,\n    subBins: []\n    /*binsForHeaviestFromMiddle */\n\n    /*[\r\n    splitBinByLength(theBin, items[0]),\r\n    splitBinByBreadth(theBin, items[0]),\r\n    splitBinByHeight(theBin, items[0])\r\n    ]*/\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 766\n    },\n    __self: this\n  }))), React.createElement(\"button\", {\n    onClick: addItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 772\n    },\n    __self: this\n  }, \"Pack\"));\n});\n/*const splitBinByLength = (bin, item) => {\r\n  return {\r\n    x: -bin.l / 2 + item.l + (bin.l - item.l) / 2,\r\n    y: -bin.b / 2 + item.b / 2,\r\n    z: -bin.h / 2 + bin.h / 2,\r\n    l: bin.l - item.l,\r\n    b: item.b,\r\n    h: bin.h,\r\n    color: '#CECECE'\r\n  };\r\n};*/","map":{"version":3,"sources":["/home/gov/projects/three/src/threedloadplan/panel/ThreeScene.js"],"names":["React","useEffect","useState","Fragment","THREE","Canvas","extend","useThree","OrbitControls","d","shape","camera","position","Vector3","style","width","height","plain","MeshBasicMaterial","map","TextureLoader","load","untiltable","unstackable","numberOfHeaviestItemsToPackFromCenter","getCornerCoordOfItemInBin","bin","item","x","cornerCoord","l","y","b","z","h","splitBinByLength","color","type","reservedForHeavyItems","splitBinByHeight","splitBinByBreadth","createSubBins","theBin","binsForHeaviestFromMiddle","createInitialBins","strategy","bins","window","items","spinItem","axis","tmp","tmp2","unspinItem","doesItemFitInBin","pack","numberOfUnpackedItems","length","previousUnpackedItems","binsCopy","i","candidateItems","j","packed","push","index","spin","spinnable","getOptimalItemForBin","optimalItemIndex","optimalItemSpin","packItem","filterAndSortBins","filter","_","isFirstFit","optimalItem","getOptimalHBin","binIndices","optimalBinIndex","optimalSpin","targetBin","optimalBin","targetBinFreeVolume","optimalBinFreeVolume","getOptimalBBin","binIndex","sort","a","sortItemsByVolume","putNHeaviestItemsFirst","n","copy","weight","heavy","slice","concat","ULDScene","uld","dimensions","subBins","gl","domElement","contour","faces","face","points","point","subBin","material","myRotationConstraints","myPositionConstraints","e","alert","id","newItems","reverse","ulds","setUlds","_items","setItems","addItem","nextItem","pop","forEach","result","console","dir","packedItems","reduce","acc"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, Fragment } from 'react';\r\nimport * as THREE from 'three/src/Three';\r\nimport { Canvas, extend, useThree } from 'react-three-fiber';\r\nimport OrbitControls from 'three-orbitcontrols';\r\n\r\nimport d from './data.json';\r\nimport shape from '../shape.json';\r\n\r\nextend({ OrbitControls });\r\n\r\nconst camera = {\r\n  position: new THREE.Vector3(0, 0, 250)\r\n};\r\nconst style = {\r\n  width: 800,\r\n  height: 800\r\n};\r\nconst plain = new THREE.MeshBasicMaterial({\r\n  map: new THREE.TextureLoader().load('images/crate.png')\r\n});\r\nconst untiltable = new THREE.MeshBasicMaterial({\r\n  map: new THREE.TextureLoader().load('images/crate_untiltable.png')\r\n});\r\nconst unstackable = new THREE.MeshBasicMaterial({\r\n  map: new THREE.TextureLoader().load('images/crate_unstackable.png')\r\n});\r\n\r\nlet numberOfHeaviestItemsToPackFromCenter = 15;\r\n\r\nconst getCornerCoordOfItemInBin = (bin, item) => ({\r\n  x: bin.cornerCoord.x + item.l / 2,\r\n  y: bin.cornerCoord.y + item.b / 2,\r\n  z: bin.cornerCoord.z + item.h / 2\r\n});\r\n\r\nconst splitBinByLength = (bin, item) => ({\r\n  x: item.l / 2,\r\n  y: 0,\r\n  z: 0,\r\n  l: bin.l - item.l,\r\n  b: bin.b,\r\n  h: bin.h,\r\n  color: '#CECECE',\r\n  cornerCoord: {\r\n    x: bin.cornerCoord.x + item.l,\r\n    y: bin.cornerCoord.y,\r\n    z: bin.cornerCoord.z\r\n  },\r\n  type: 'l',\r\n  reservedForHeavyItems: bin.reservedForHeavyItems\r\n});\r\n\r\nconst splitBinByHeight = (bin, item) => ({\r\n  x: -bin.l / 2 + item.l / 2,\r\n  y: 0,\r\n  z: item.h / 2,\r\n  l: item.l,\r\n  b: bin.b,\r\n  h: bin.h - item.h,\r\n  color: '#000',\r\n  cornerCoord: {\r\n    x: bin.cornerCoord.x,\r\n    y: bin.cornerCoord.y,\r\n    z: bin.cornerCoord.z + item.h\r\n  },\r\n  type: 'h',\r\n  reservedForHeavyItems: bin.reservedForHeavyItems\r\n});\r\n\r\nconst splitBinByBreadth = (bin, item) => ({\r\n  x: -bin.l / 2 + item.l / 2,\r\n  y: item.b / 2,\r\n  z: -bin.h / 2 + item.h / 2,\r\n  l: item.l,\r\n  b: bin.b - item.b,\r\n  h: item.h,\r\n  color: '#000',\r\n  cornerCoord: {\r\n    x: bin.cornerCoord.x,\r\n    y: bin.cornerCoord.y + item.b,\r\n    z: bin.cornerCoord.z\r\n  },\r\n  type: 'b',\r\n  reservedForHeavyItems: bin.reservedForHeavyItems\r\n});\r\n\r\nconst createSubBins = (bin, item) =>\r\n  [\r\n    splitBinByLength(bin, item),\r\n    splitBinByHeight(bin, item),\r\n    splitBinByBreadth(bin, item)\r\n  ];\r\n\r\nconst theBin = {\r\n  l: 244,\r\n  b: 163,\r\n  h: 163,\r\n  cornerCoord: {\r\n    x: -244 / 2,\r\n    y: -163 / 2,\r\n    z: -163 / 2\r\n  }\r\n};\r\n\r\nconst binsForHeaviestFromMiddle = [{ // left\r\n    x: -244 / 2 + 80 / 2,\r\n    y: 0,\r\n    z: 0,\r\n    l: 80,\r\n    b: 163,\r\n    h: 163,\r\n    cornerCoord: {\r\n      x: -244 / 2,\r\n      y: -163 / 2,\r\n      z: -163 / 2\r\n    },\r\n    color: 'red'\r\n  }, { // middle\r\n    x: 0,\r\n    y: 0,\r\n    z: 0,\r\n    l: 84,\r\n    b: 163,\r\n    h: 83,\r\n    cornerCoord: {\r\n      x: -244 / 2 + 80,\r\n      y: -163 / 2,\r\n      z: -163 / 2 + 40\r\n    },\r\n    color: 'red',\r\n    reservedForHeavyItems: true\r\n  }, { // right\r\n    x: -244 / 2 + 80 / 2 + 80 + 84,\r\n    y: 0,\r\n    z: 0,\r\n    l: 80,\r\n    b: 163,\r\n    h: 163,\r\n    cornerCoord: {\r\n      x: -244 / 2 + 80 + 84,\r\n      y: -163 / 2,\r\n      z: -163 / 2\r\n    },\r\n    color: 'red'\r\n  }, { // back\r\n    x: 0,\r\n    y: 0,\r\n    z: -163 / 2 + 40 / 2,\r\n    l: 84,\r\n    b: 163,\r\n    h: 40,\r\n    cornerCoord: {\r\n      x: -244 / 2 + 80,\r\n      y: -163 / 2,\r\n      z: -163 / 2\r\n    },\r\n    color: 'red'\r\n  }, { // front\r\n    x: 0,\r\n    y: 0,\r\n    z: 163 / 2 - 40 / 2,\r\n    l: 84,\r\n    b: 163,\r\n    h: 40,\r\n    cornerCoord: {\r\n      x: -244 / 2 + 80,\r\n      y: -163 / 2,\r\n      z: -163 / 2 + 40 + 83\r\n    },\r\n    color: 'red'\r\n  }];\r\n\r\nconst createInitialBins = strategy => {\r\n  if (strategy === 1) { // heaviest from middle\r\n    return binsForHeaviestFromMiddle;\r\n  }\r\n  else {\r\n    numberOfHeaviestItemsToPackFromCenter = -1;\r\n    return [{\r\n      l: 244,\r\n      b: 163,\r\n      h: 163,\r\n      cornerCoord: {\r\n        x: -244 / 2,\r\n        y: -163 / 2,\r\n        z: -163 / 2\r\n      }\r\n    }];\r\n  }\r\n};\r\n\r\nlet bins = createInitialBins(0);\r\nwindow.bins = bins;\r\n\r\nlet items = [{\r\n  l: 40,\r\n  b: 45,\r\n  h: 46\r\n}];\r\n\r\nconst spinItem = (item, axis = 1) => {\r\n  let tmp, tmp2;\r\n\r\n  unspinItem(item);\r\n\r\n  if (axis === 1) {\r\n    tmp = item.l;\r\n    item.l = item.b;\r\n    item.b = tmp;\r\n  }\r\n  else if (axis === 2) {\r\n    tmp = item.b;\r\n    item.b = item.h;\r\n    item.h = tmp;\r\n  }\r\n  else if (axis === 3) {\r\n    tmp = item.l;\r\n    item.l = item.h;\r\n    item.h = tmp;\r\n  }\r\n  else if (axis === 4) {\r\n    tmp = item.l;\r\n    item.l = item.b;\r\n    item.b = tmp;\r\n\r\n    tmp2 = item.h;\r\n    item.h = item.l;\r\n    item.l = tmp2;\r\n  }\r\n  else if (axis === 5) {\r\n    tmp = item.l;\r\n    item.l = item.b;\r\n    item.b = tmp;\r\n\r\n    tmp2 = item.h;\r\n    item.h = item.b;\r\n    item.b = tmp2;\r\n  }\r\n\r\n  item.axis = axis;\r\n};\r\n\r\n//spinItem()\r\n\r\nconst unspinItem = item => {\r\n  let tmp, tmp2;\r\n\r\n  if (item.axis === 1) {\r\n    tmp = item.l;\r\n    item.l = item.b;\r\n    item.b = tmp;\r\n  }\r\n  else if (item.axis === 2) {\r\n    tmp = item.b;\r\n    item.b = item.h;\r\n    item.h = tmp;\r\n  }\r\n  else if (item.axis === 3) {\r\n    tmp = item.l;\r\n    item.l = item.h;\r\n    item.h = tmp;\r\n  }\r\n  else if (item.axis === 4) {\r\n    tmp2 = item.h;\r\n    item.h = item.l;\r\n    item.l = tmp2;\r\n\r\n    tmp = item.l;\r\n    item.l = item.b;\r\n    item.b = tmp;\r\n  }\r\n  else if (item.axis === 5) {\r\n    tmp2 = item.h;\r\n    item.h = item.b;\r\n    item.b = tmp2;\r\n\r\n    \r\n    tmp = item.l;\r\n    item.l = item.b;\r\n    item.b = tmp;\r\n  }\r\n\r\n  item.axis = 0;\r\n};\r\n\r\nconst doesItemFitInBin = (bin, item) =>\r\n  item.l <= bin.l && item.b <= bin.b && item.h <= bin.h;\r\n\r\nconst pack = items => {debugger;\r\n  bins = createInitialBins(0);\r\n  /*if (bins.length === 1) {\r\n    packItem(bins[0], 0, items[0]);\r\n    bins = filterAndSortBins(bins);\r\n    return { bins, items };\r\n  }*/\r\n\r\n  let numberOfUnpackedItems = items.length;\r\n  let previousUnpackedItems = -1;\r\n\r\n  while (previousUnpackedItems !== numberOfUnpackedItems && numberOfUnpackedItems !== 0) {\r\n    const binsCopy = [...bins];\r\n    previousUnpackedItems = numberOfUnpackedItems;\r\n\r\n    for (let i = 0; i < binsCopy.length; i++) {\r\n      const bin = binsCopy[i];\r\n      const candidateItems = [];\r\n  \r\n      for (let j = 0; j < items.length; j++) {\r\n        const item = items[j];\r\n\r\n        if (item.packed) continue;\r\n  \r\n        if (doesItemFitInBin(bin, item)) {\r\n          candidateItems.push({ item, index: j, spin: 0 });\r\n        }\r\n        /*else*/ if (item.spinnable) {\r\n          spinItem(item, 1);\r\n\r\n          if (doesItemFitInBin(bin, item)) {\r\n            candidateItems.push({ item, index: j, spin: 1 });\r\n          }\r\n          //else {\r\n            spinItem(item, 2);\r\n  \r\n            if (doesItemFitInBin(bin, item)) {\r\n              candidateItems.push({ item, index: j, spin: 2 });\r\n            }\r\n            //else {\r\n              spinItem(item, 3);\r\n    \r\n              if (doesItemFitInBin(bin, item)) {\r\n                candidateItems.push({ item, index: j, spin: 3 });\r\n              }\r\n              //else {\r\n                spinItem(item, 4);\r\n      \r\n                if (doesItemFitInBin(bin, item)) {\r\n                  candidateItems.push({ item, index: j, spin: 4 });\r\n                }\r\n                //else {\r\n                  spinItem(item, 5);\r\n        \r\n                  if (doesItemFitInBin(bin, item)) {\r\n                    candidateItems.push({ item, index: j, spin: 5 });\r\n                  }\r\n                  unspinItem(item);\r\n                //}\r\n              //}\r\n            //}\r\n          //}\r\n        }\r\n      }\r\n\r\n      //debugger;\r\n\r\n      if (candidateItems.length > 0) {\r\n        const { optimalItemIndex, optimalItemSpin } = getOptimalItemForBin(candidateItems, bin);\r\n        spinItem(items[optimalItemIndex], optimalItemSpin);\r\n        packItem(bin, i, items[optimalItemIndex]);\r\n      }\r\n\r\n      //debugger;\r\n\r\n    }\r\n    debugger;\r\n    \r\n    bins = filterAndSortBins(bins);\r\n    debugger;\r\n    window.bins = bins;\r\n  \r\n    numberOfUnpackedItems = items.filter(_ => !_.packed).length;\r\n\r\n    if (numberOfUnpackedItems === 0) break;\r\n  }\r\n\r\n  return {\r\n    bins,\r\n    items\r\n  };\r\n};\r\n\r\nconst isFirstFit = bin => {\r\n  return true;\r\n  return bin.type === 'l'\r\n};\r\n\r\nconst getOptimalItemForBin = (items, bin) => {\r\n  let optimalItem = items[0].item;\r\n  let optimalItemIndex = items[0].index;\r\n  let optimalItemSpin = items[0].spin;\r\n\r\n  items.map(({ item, index, spin }) => {\r\n    if (bin.type === 'h' && item.l > optimalItem.l) {\r\n      optimalItem = item;\r\n      optimalItemIndex = index;\r\n      optimalItemSpin = spin;\r\n    }\r\n    else if (bin.type === 'b' && (((bin.h - item.h) * bin.l * item.b) + (item.h * (bin.l - item.l) * item.b))\r\n      < (((bin.h - optimalItem.h) * bin.l * optimalItem.b)) + (optimalItem.h * (bin.l - optimalItem.l) * optimalItem.b)) {\r\n      optimalItem = item;\r\n      optimalItemIndex = index;\r\n      optimalItemSpin = spin;\r\n    }\r\n    else if (item.l * item.b * item.h > optimalItem.l * optimalItem.b * optimalItem.h) {\r\n      optimalItem = item;\r\n      optimalItemIndex = index;\r\n      optimalItemSpin = spin;\r\n    }\r\n  });\r\n\r\n  return { optimalItemIndex, optimalItemSpin };\r\n}\r\n\r\nconst getOptimalHBin = (binIndices, item) => {\r\n  let optimalBinIndex = binIndices[0].index;\r\n  let optimalSpin = binIndices[0].spin;\r\n\r\n  binIndices.map(({ index, spin }) => {\r\n    const targetBin = bins[index];\r\n    const optimalBin = bins[optimalBinIndex];\r\n    let targetBinFreeVolume, optimalBinFreeVolume;\r\n\r\n    if (targetBin.type === 'h') {\r\n      targetBinFreeVolume = (targetBin.l - item.l) * item.h * item.b;\r\n    }\r\n\r\n    if (optimalBin.type === 'h') {\r\n      optimalBinFreeVolume = (optimalBin.l - item.l) * item.h * item.b;\r\n    }\r\n\r\n    /*if (targetBin.type === 'h') {\r\n      if (optimalBin.type === 'h' && targetBinFreeVolume < ((optimalBin.l - optimalBin.l) * optimalBin.h * optimalBin.b)) {\r\n        optimalBinIndex = index;\r\n      }\r\n      else if (optimalBin.type === 'b' && ((targetBin.l - item.l) * item.h * item.b) < ((optimalBin.l - optimalBin.l) * optimalBin.h * optimalBin.b))\r\n    }*/\r\n    if (targetBinFreeVolume < optimalBinFreeVolume) {\r\n      optimalBinIndex = index;\r\n      optimalSpin = spin;\r\n    }\r\n    /*else if (targetBin.type === 'b' && (targetBin.l + targetBin.h) < (optimalBin.l + optimalBin.h)) {\r\n      optimalBinIndex = index;\r\n    }*/\r\n  });\r\n\r\n  return { optimalBinIndex, optimalSpin };\r\n};\r\n\r\nconst getOptimalBBin = (binIndices, item) => {\r\n  let optimalBinIndex = binIndices[0].index;\r\n  let optimalSpin = binIndices[0].spin;\r\n\r\n  binIndices.map(({ index, spin }) => {\r\n    const targetBin = bins[index];\r\n    const optimalBin = bins[optimalBinIndex];\r\n    let targetBinFreeVolume, optimalBinFreeVolume;\r\n\r\n    if (targetBin.type === 'b') {\r\n      targetBinFreeVolume = ((targetBin.l - item.l) * item.h * item.b) + (item.l * (targetBin.h - item.h) * item.b);\r\n    }\r\n\r\n    if (targetBin.type === 'b') {\r\n      optimalBinFreeVolume = ((optimalBin.l - item.l) * item.h * item.b) + (item.l * (optimalBin.h - item.h) * item.b);\r\n    }\r\n\r\n    /*if (targetBin.type === 'h') {\r\n      if (optimalBin.type === 'h' && targetBinFreeVolume < ((optimalBin.l - optimalBin.l) * optimalBin.h * optimalBin.b)) {\r\n        optimalBinIndex = index;\r\n      }\r\n      else if (optimalBin.type === 'b' && ((targetBin.l - item.l) * item.h * item.b) < ((optimalBin.l - optimalBin.l) * optimalBin.h * optimalBin.b))\r\n    }*/\r\n    if (targetBinFreeVolume < optimalBinFreeVolume) {\r\n      optimalBinIndex = index;\r\n      optimalSpin = spin;\r\n    }\r\n    /*else if (targetBin.type === 'b' && (targetBin.l + targetBin.h) < (optimalBin.l + optimalBin.h)) {\r\n      optimalBinIndex = index;\r\n    }*/\r\n  });\r\n\r\n  return { optimalBinIndex, optimalSpin };\r\n};\r\n\r\nconst packItem = (bin, binIndex, item) => {\r\n  const _  = getCornerCoordOfItemInBin(bin, item);\r\n\r\n  bins.push(...createSubBins(bin, item));\r\n  bins[binIndex] = null;\r\n\r\n  item.x = _.x;\r\n  item.y = _.y;\r\n  item.z = _.z;\r\n  item.packed = true;\r\n};\r\n\r\nconst filterAndSortBins = bins =>\r\n  bins\r\n  .filter(bin => bin && bin.l !== 0 && bin.b !== 0 && bin.h !== 0)\r\n  .sort((a, b) => {\r\n    if (a.type === 'h') {\r\n      if (b.type !== 'h') {\r\n        return -1;\r\n      }\r\n      if (a.l > b.l) {\r\n        return -1;\r\n      }\r\n      return 1;\r\n    }\r\n    if (a.type === 'b') {\r\n      if (b.type === 'l') return -1;\r\n      if (a.l * a.h > b.l * b.h) {\r\n        return -1;\r\n      }\r\n      return 1;\r\n    }\r\n    if (a.type === 'l') return 1;\r\n  });\r\n\r\nconst sortItemsByVolume = items => items.sort((a, b) => {\r\n  if (a.unstackable && !b.unstackable)\r\n    return 1;\r\n  if (b.unstackable && !a.unstackable)\r\n    return -1;\r\n  if ((a.l * a.b * a.h) > (b.l * b.b * b.h))\r\n    return -1\r\n  return 1;\r\n});\r\n\r\nconst putNHeaviestItemsFirst = (items, n = numberOfHeaviestItemsToPackFromCenter) => {\r\n  if (numberOfHeaviestItemsToPackFromCenter === -1) return items;\r\n\r\n  const copy = items.map((item, index) => ({ item, index }));\r\n\r\n  // TODO: handle heaviest but not stackable\r\n  copy.sort((a, b) => {\r\n    if (a.item.unstackable) {\r\n      return 1;\r\n    }\r\n    if (a.item.weight > b.item.weight)\r\n      return -1;\r\n    return 1;\r\n  });\r\n\r\n  for (let i = 0; i < n; i++) {\r\n    items[copy[i].index] = null;\r\n  }\r\n\r\n  return copy.map(_ => ({ ..._.item, heavy: true })).slice(0, n).concat(items.filter(_ => _));\r\n};\r\n\r\nconst ULDScene = ({ uld, dimensions, items = [], subBins }) => {\r\n  const { camera, gl } = useThree();\r\n\r\n  /*const item = {\r\n    x: -244 / 2,\r\n    y: -163 / 2,\r\n    z: -163 / 2,\r\n    l: 40,\r\n    b: 10,\r\n    h: 60\r\n  };\r\n\r\n  spinItem(item, 5);\r\n  unspinItem(item);\r\n\r\n  const material = item.myRotationConstraints === 7\r\n          ? untiltable\r\n          : item.myPositionConstraints === 2\r\n            ? unstackable\r\n            : plain;*/\r\n\r\n  return (\r\n    <Fragment>\r\n      <orbitControls args={[camera, gl.domElement]} enableDamping />\r\n      <group>\r\n        {uld.contour.faces.map(face =>\r\n          <line>\r\n            <geometry\r\n              attach='geometry'\r\n              vertices={face.points.map(point => new THREE.Vector3(point.x, point.y, point.z))}\r\n            />\r\n            <lineBasicMaterial attach='material' color='#8A8A8A' />\r\n          </line>)}\r\n      </group>\r\n      {(subBins || []).map(subBin => {\r\n        return (\r\n          <mesh position={[subBin.x + subBin.cornerCoord.x, subBin.y, subBin]} color='#CECECE'>         \r\n            <boxBufferGeometry\r\n              attach='geometry'\r\n              args={[subBin.l, subBin.b, subBin.h]}\r\n            />\r\n          </mesh>\r\n        );\r\n      })}\r\n      {items.map(item => {\r\n        const material = item.myRotationConstraints === 7\r\n          ? untiltable\r\n          : item.myPositionConstraints === 2\r\n            ? unstackable\r\n            : plain;\r\n\r\n        return (\r\n          <mesh\r\n            position={[item.x, item.y, item.z]}\r\n            material={material}\r\n            onClick={e => alert(item.id)}\r\n          >         \r\n            <boxBufferGeometry\r\n              attach='geometry'\r\n              args={[item.l, item.b, item.h]}\r\n            />\r\n            {item.heavy && <meshBasicMaterial attach='material' color='red' />}\r\n            {item.unstackable && <meshBasicMaterial attach='material' color='blue' />}\r\n          </mesh>\r\n        );\r\n      })}\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nitems = pack(items).items;\r\n\r\n/*let newItems = [\r\n  {\"id\":12,\"l\":40,\"b\":37,\"h\":38,\"weight\":17.512055393515897},\r\n  {\"id\":96,\"l\":36,\"b\":38,\"h\":39,\"weight\":26.703374934395853, unstackable: true},\r\n  {\"id\":21,\"l\":36,\"b\":37,\"h\":39,\"weight\":22.691877999126895, unstackable: true},\r\n  {\"id\":35,\"l\":32,\"b\":39,\"h\":38,\"weight\":7.076429841596443, unstackable: true},\r\n  {\"id\":7,\"l\":32,\"b\":37,\"h\":37,\"weight\":25.01681973005458, unstackable: true},\r\n  {\"id\":66,\"l\":37,\"b\":32,\"h\":37,\"weight\":16.93326049314387, unstackable: true},\r\n  {\"id\":6,\"l\":25,\"b\":21,\"h\":21,\"weight\":12.980079999287524, unstackable: true},\r\n  {\"id\":60,\"l\":27,\"b\":21,\"h\":22,\"weight\":13.71305998672768, unstackable: true},\r\n  {\"id\":41,\"l\":27,\"b\":23,\"h\":21,\"weight\":19.971004273977485, unstackable: true},\r\n  {\"id\":45,\"l\":27,\"b\":24,\"h\":22,\"weight\":15.690667821632571, unstackable: true},\r\n  {\"id\":8,\"l\":27,\"b\":21,\"h\":26,\"weight\":3.741435966054032, unstackable: true},{\"id\":61,\"l\":23,\"b\":26,\"h\":25,\"weight\":18.571232311441438},{\"id\":89,\"l\":21,\"b\":35,\"h\":21,\"weight\":3.8835760272165976},{\"id\":39,\"l\":21,\"b\":24,\"h\":31,\"weight\":18.14821319246191},{\"id\":11,\"l\":26,\"b\":28,\"h\":23,\"weight\":5.91564583675988},{\"id\":38,\"l\":27,\"b\":21,\"h\":30,\"weight\":14.592157825059067},{\"id\":50,\"l\":21,\"b\":22,\"h\":38,\"weight\":29.715900582492797,\"heavy\":true},{\"id\":69,\"l\":32,\"b\":24,\"h\":23,\"weight\":17.12318864349656},{\"id\":64,\"l\":31,\"b\":25,\"h\":23,\"weight\":28.424008716024396,\"heavy\":true},{\"id\":5,\"l\":21,\"b\":25,\"h\":34,\"weight\":25.969313393902155},{\"id\":27,\"l\":36,\"b\":21,\"h\":24,\"weight\":20.262957384215298},{\"id\":90,\"l\":23,\"b\":21,\"h\":38,\"weight\":18.55234432630118},{\"id\":92,\"l\":22,\"b\":28,\"h\":30,\"weight\":9.171915053595391},{\"id\":47,\"l\":30,\"b\":22,\"h\":28,\"weight\":16.697730285722074},{\"id\":58,\"l\":22,\"b\":39,\"h\":22,\"weight\":13.47099258257317},{\"id\":73,\"l\":23,\"b\":38,\"h\":22,\"weight\":4.038086801856224},{\"id\":19,\"l\":25,\"b\":35,\"h\":22,\"weight\":14.474375699587071},{\"id\":63,\"l\":28,\"b\":28,\"h\":25,\"weight\":23.184998954408425},{\"id\":18,\"l\":28,\"b\":32,\"h\":22,\"weight\":11.364336818339147},{\"id\":70,\"l\":25,\"b\":25,\"h\":32,\"weight\":14.57784845840147},{\"id\":97,\"l\":23,\"b\":22,\"h\":40,\"weight\":3.2404087035059748},{\"id\":0,\"l\":22,\"b\":26,\"h\":36,\"weight\":16.093665484613155},{\"id\":20,\"l\":32,\"b\":28,\"h\":23,\"weight\":6.105939599542991},{\"id\":94,\"l\":27,\"b\":35,\"h\":22,\"weight\":4.415246868746678},{\"id\":9,\"l\":27,\"b\":23,\"h\":34,\"weight\":1.946753195940969},{\"id\":93,\"l\":31,\"b\":22,\"h\":32,\"weight\":21.50995442856736},{\"id\":2,\"l\":27,\"b\":27,\"h\":30,\"weight\":17.667366202642995},{\"id\":71,\"l\":27,\"b\":33,\"h\":25,\"weight\":15.75517438921587},{\"id\":76,\"l\":21,\"b\":28,\"h\":38,\"weight\":7.429303206362379},{\"id\":49,\"l\":24,\"b\":24,\"h\":39,\"weight\":11.478326197037989},{\"id\":78,\"l\":22,\"b\":38,\"h\":27,\"weight\":18.455676524076893},{\"id\":88,\"l\":26,\"b\":35,\"h\":25,\"weight\":0.9699530053335081},{\"id\":33,\"l\":34,\"b\":21,\"h\":32,\"weight\":24.239957400704938},{\"id\":86,\"l\":25,\"b\":23,\"h\":40,\"weight\":18.09549907898296},{\"id\":4,\"l\":37,\"b\":24,\"h\":26,\"weight\":9.487921863035343},{\"id\":81,\"l\":25,\"b\":30,\"h\":31,\"weight\":9.139865840818096},{\"id\":43,\"l\":30,\"b\":26,\"h\":30,\"weight\":24.26232930816665},{\"id\":68,\"l\":28,\"b\":35,\"h\":24,\"weight\":9.005780799160242},{\"id\":84,\"l\":37,\"b\":22,\"h\":29,\"weight\":0.6178611192579386},{\"id\":77,\"l\":32,\"b\":34,\"h\":22,\"weight\":18.64229377819448},{\"id\":53,\"l\":35,\"b\":30,\"h\":23,\"weight\":26.496847353834493},{\"id\":56,\"l\":33,\"b\":31,\"h\":24,\"weight\":29.59836014297159,\"heavy\":true},{\"id\":74,\"l\":30,\"b\":35,\"h\":24,\"weight\":8.960694713923294},{\"id\":28,\"l\":34,\"b\":34,\"h\":22,\"weight\":15.369934327427465},{\"id\":3,\"l\":34,\"b\":27,\"h\":28,\"weight\":18.701171432157967},{\"id\":30,\"l\":37,\"b\":28,\"h\":25,\"weight\":15.077440069070096},{\"id\":46,\"l\":40,\"b\":24,\"h\":27,\"weight\":3.6163665769692144},{\"id\":67,\"l\":35,\"b\":24,\"h\":31,\"weight\":7.771779026714247},{\"id\":24,\"l\":35,\"b\":24,\"h\":31,\"weight\":25.270931113697404},{\"id\":23,\"l\":31,\"b\":30,\"h\":29,\"weight\":26.11981924304361},{\"id\":40,\"l\":39,\"b\":24,\"h\":29,\"weight\":0.16539321499317472},{\"id\":95,\"l\":35,\"b\":29,\"h\":27,\"weight\":17.64554744051333},{\"id\":42,\"l\":25,\"b\":38,\"h\":29,\"weight\":12.175004168843515},{\"id\":14,\"l\":28,\"b\":38,\"h\":26,\"weight\":11.61484399237407},{\"id\":65,\"l\":36,\"b\":37,\"h\":21,\"weight\":19.21840474585028},{\"id\":57,\"l\":27,\"b\":37,\"h\":28,\"weight\":26.63980839091846},{\"id\":16,\"l\":28,\"b\":35,\"h\":29,\"weight\":9.483466791065275},{\"id\":1,\"l\":33,\"b\":32,\"h\":27,\"weight\":10.8357904803525},{\"id\":37,\"l\":25,\"b\":36,\"h\":32,\"weight\":28.51016057956189,\"heavy\":true},{\"id\":79,\"l\":33,\"b\":34,\"h\":26,\"weight\":0.5838271763078984},{\"id\":83,\"l\":36,\"b\":22,\"h\":37,\"weight\":3.056265603933983},{\"id\":51,\"l\":33,\"b\":34,\"h\":28,\"weight\":26.309137613438892},{\"id\":85,\"l\":31,\"b\":32,\"h\":32,\"weight\":14.350839133465891},{\"id\":98,\"l\":30,\"b\":37,\"h\":29,\"weight\":11.61732623812642},{\"id\":82,\"l\":35,\"b\":40,\"h\":23,\"weight\":23.706833725894324},{\"id\":72,\"l\":29,\"b\":29,\"h\":39,\"weight\":29.30913974926043,\"heavy\":true},{\"id\":91,\"l\":29,\"b\":30,\"h\":38,\"weight\":3.5865122975081265},{\"id\":52,\"l\":35,\"b\":26,\"h\":37,\"weight\":4.839286663491098},{\"id\":13,\"l\":37,\"b\":24,\"h\":38,\"weight\":17.657981490529153},{\"id\":75,\"l\":32,\"b\":36,\"h\":30,\"weight\":8.687703545766501},{\"id\":55,\"l\":36,\"b\":37,\"h\":26,\"weight\":22.48762302159906},{\"id\":99,\"l\":38,\"b\":38,\"h\":24,\"weight\":19.741663999555584},{\"id\":31,\"l\":32,\"b\":35,\"h\":31,\"weight\":13.00040714591772},{\"id\":36,\"l\":28,\"b\":40,\"h\":31,\"weight\":25.949981233693073},{\"id\":87,\"l\":32,\"b\":34,\"h\":32,\"weight\":15.374188710865752},{\"id\":32,\"l\":25,\"b\":38,\"h\":37,\"weight\":20.074620049181867},{\"id\":54,\"l\":34,\"b\":26,\"h\":40,\"weight\":19.532050152956128},{\"id\":48,\"l\":40,\"b\":36,\"h\":25,\"weight\":13.67986502429352},{\"id\":22,\"l\":40,\"b\":36,\"h\":25,\"weight\":27.222715994183154,\"heavy\":true},{\"id\":25,\"l\":37,\"b\":39,\"h\":26,\"weight\":9.020129036788646},{\"id\":59,\"l\":37,\"b\":40,\"h\":26,\"weight\":26.608004530686173},{\"id\":34,\"l\":37,\"b\":29,\"h\":36,\"weight\":9.62276092234049},{\"id\":15,\"l\":25,\"b\":40,\"h\":39,\"weight\":13.605066733913336},{\"id\":62,\"l\":33,\"b\":37,\"h\":32,\"weight\":6.350320915044552},{\"id\":44,\"l\":38,\"b\":39,\"h\":27,\"weight\":10.825609761402571},{\"id\":29,\"l\":38,\"b\":32,\"h\":33,\"weight\":27.38340114782676,\"heavy\":true},{\"id\":17,\"l\":30,\"b\":34,\"h\":40,\"weight\":11.063160950866195},{\"id\":10,\"l\":38,\"b\":32,\"h\":34,\"weight\":28.055240502714952,\"heavy\":true},{\"id\":80,\"l\":34,\"b\":40,\"h\":32,\"weight\":8.298644465320608},{\"id\":26,\"l\":31,\"b\":36,\"h\":39,\"weight\":27.157963021699658,\"heavy\":true}];\r\n\r\nnewItems.forEach(_ => _.spinnable = true);*/\r\n\r\n\r\n//let newItems = require('./input1.json');\r\n\r\n// Thin\r\n//let newItems = [{\"id\":0,\"l\":27,\"b\":30,\"h\":37,\"weight\":23.8243824415764,\"spinnable\":true,\"unstackable\":false},{\"id\":1,\"l\":24,\"b\":25,\"h\":40,\"weight\":24.19723690787775,\"spinnable\":true,\"unstackable\":false},{\"id\":2,\"l\":22,\"b\":24,\"h\":35,\"weight\":29.171157759232564,\"spinnable\":true,\"unstackable\":false},{\"id\":3,\"l\":23,\"b\":27,\"h\":21,\"weight\":22.785189966281052,\"spinnable\":true,\"unstackable\":false},{\"id\":4,\"l\":21,\"b\":34,\"h\":22,\"weight\":9.95839134825328,\"spinnable\":true,\"unstackable\":false},{\"id\":5,\"l\":26,\"b\":29,\"h\":21,\"weight\":19.47137816799697,\"spinnable\":true,\"unstackable\":false},{\"id\":6,\"l\":40,\"b\":33,\"h\":40,\"weight\":13.956884628026174,\"spinnable\":true,\"unstackable\":true},{\"id\":7,\"l\":35,\"b\":37,\"h\":35,\"weight\":23.192830844833562,\"spinnable\":true,\"unstackable\":true},{\"id\":8,\"l\":40,\"b\":33,\"h\":35,\"weight\":4.459304635675467,\"spinnable\":true,\"unstackable\":false},{\"id\":9,\"l\":25,\"b\":31,\"h\":26,\"weight\":0.8697855663563958,\"spinnable\":true,\"unstackable\":false},{\"id\":10,\"l\":29,\"b\":28,\"h\":35,\"weight\":23.69631724494008,\"spinnable\":true,\"unstackable\":false},{\"id\":11,\"l\":25,\"b\":26,\"h\":24,\"weight\":11.552444275721857,\"spinnable\":true,\"unstackable\":false},{\"id\":12,\"l\":28,\"b\":36,\"h\":27,\"weight\":3.3680129558021132,\"spinnable\":true,\"unstackable\":false},{\"id\":13,\"l\":40,\"b\":32,\"h\":35,\"weight\":2.33135335134127,\"spinnable\":true,\"unstackable\":false},{\"id\":14,\"l\":29,\"b\":26,\"h\":25,\"weight\":17.7970786560673,\"spinnable\":true,\"unstackable\":false},{\"id\":15,\"l\":24,\"b\":33,\"h\":38,\"weight\":11.240342862932806,\"spinnable\":true,\"unstackable\":false},{\"id\":16,\"l\":35,\"b\":24,\"h\":22,\"weight\":12.138284983033907,\"spinnable\":true,\"unstackable\":false},{\"id\":17,\"l\":32,\"b\":30,\"h\":38,\"weight\":4.6695800163602,\"spinnable\":true,\"unstackable\":false},{\"id\":18,\"l\":26,\"b\":25,\"h\":29,\"weight\":29.722640918637627,\"spinnable\":true,\"unstackable\":false},{\"id\":19,\"l\":40,\"b\":39,\"h\":31,\"weight\":24.86821805050382,\"spinnable\":true,\"unstackable\":false},{\"id\":20,\"l\":23,\"b\":38,\"h\":21,\"weight\":14.619968912310085,\"spinnable\":true,\"unstackable\":true},{\"id\":21,\"l\":30,\"b\":34,\"h\":22,\"weight\":27.850761836439805,\"spinnable\":true,\"unstackable\":false},{\"id\":22,\"l\":35,\"b\":33,\"h\":22,\"weight\":13.890810204513254,\"spinnable\":true,\"unstackable\":false},{\"id\":23,\"l\":28,\"b\":30,\"h\":31,\"weight\":10.311343132069041,\"spinnable\":true,\"unstackable\":false},{\"id\":24,\"l\":21,\"b\":39,\"h\":26,\"weight\":28.12506938444379,\"spinnable\":true,\"unstackable\":false},{\"id\":25,\"l\":24,\"b\":32,\"h\":29,\"weight\":19.565167282107396,\"spinnable\":true,\"unstackable\":false},{\"id\":26,\"l\":23,\"b\":31,\"h\":30,\"weight\":28.988549408655516,\"spinnable\":true,\"unstackable\":false},{\"id\":27,\"l\":27,\"b\":31,\"h\":30,\"weight\":9.104639088133004,\"spinnable\":true,\"unstackable\":false},{\"id\":28,\"l\":23,\"b\":30,\"h\":33,\"weight\":23.854778877556203,\"spinnable\":true,\"unstackable\":false},{\"id\":29,\"l\":21,\"b\":28,\"h\":30,\"weight\":0.5309597179832526,\"spinnable\":true,\"unstackable\":false},{\"id\":30,\"l\":21,\"b\":40,\"h\":29,\"weight\":15.147503842887083,\"spinnable\":true,\"unstackable\":true},{\"id\":31,\"l\":29,\"b\":29,\"h\":27,\"weight\":4.0661973065357015,\"spinnable\":true,\"unstackable\":false},{\"id\":32,\"l\":24,\"b\":31,\"h\":29,\"weight\":20.43277483772848,\"spinnable\":true,\"unstackable\":false},{\"id\":33,\"l\":37,\"b\":22,\"h\":36,\"weight\":6.777035598472283,\"spinnable\":true,\"unstackable\":false},{\"id\":34,\"l\":30,\"b\":39,\"h\":36,\"weight\":12.037948757711188,\"spinnable\":true,\"unstackable\":true},{\"id\":35,\"l\":39,\"b\":24,\"h\":33,\"weight\":9.204916326738319,\"spinnable\":true,\"unstackable\":false},{\"id\":36,\"l\":21,\"b\":28,\"h\":40,\"weight\":9.693379398331976,\"spinnable\":true,\"unstackable\":false},{\"id\":37,\"l\":33,\"b\":38,\"h\":22,\"weight\":15.86285487431782,\"spinnable\":true,\"unstackable\":false},{\"id\":38,\"l\":31,\"b\":40,\"h\":22,\"weight\":10.241082483988983,\"spinnable\":true,\"unstackable\":false},{\"id\":39,\"l\":21,\"b\":21,\"h\":34,\"weight\":15.67076627173477,\"spinnable\":true,\"unstackable\":false},{\"id\":40,\"l\":24,\"b\":25,\"h\":22,\"weight\":27.895331136912855,\"spinnable\":true,\"unstackable\":false},{\"id\":41,\"l\":21,\"b\":28,\"h\":28,\"weight\":25.757697189071756,\"spinnable\":true,\"unstackable\":false},{\"id\":42,\"l\":26,\"b\":30,\"h\":26,\"weight\":5.552416233944513,\"spinnable\":true,\"unstackable\":false},{\"id\":43,\"l\":37,\"b\":28,\"h\":38,\"weight\":2.7302499043669792,\"spinnable\":true,\"unstackable\":false},{\"id\":44,\"l\":36,\"b\":40,\"h\":40,\"weight\":23.66883275584508,\"spinnable\":true,\"unstackable\":false},{\"id\":45,\"l\":25,\"b\":39,\"h\":36,\"weight\":13.705050572168776,\"spinnable\":true,\"unstackable\":false},{\"id\":46,\"l\":25,\"b\":21,\"h\":40,\"weight\":9.570352841485994,\"spinnable\":true,\"unstackable\":false},{\"id\":47,\"l\":40,\"b\":37,\"h\":21,\"weight\":23.694206704883857,\"spinnable\":true,\"unstackable\":false},{\"id\":48,\"l\":25,\"b\":40,\"h\":37,\"weight\":23.607284294845595,\"spinnable\":true,\"unstackable\":false},{\"id\":49,\"l\":23,\"b\":31,\"h\":28,\"weight\":16.91424458327872,\"spinnable\":true,\"unstackable\":false},{\"id\":50,\"l\":27,\"b\":25,\"h\":32,\"weight\":24.184479677788705,\"spinnable\":true,\"unstackable\":false},{\"id\":51,\"l\":26,\"b\":32,\"h\":40,\"weight\":18.980955101831565,\"spinnable\":true,\"unstackable\":false},{\"id\":52,\"l\":35,\"b\":37,\"h\":32,\"weight\":25.040706108000876,\"spinnable\":true,\"unstackable\":false},{\"id\":53,\"l\":40,\"b\":28,\"h\":25,\"weight\":12.795393584908954,\"spinnable\":true,\"unstackable\":false},{\"id\":54,\"l\":37,\"b\":39,\"h\":21,\"weight\":9.677237734468864,\"spinnable\":true,\"unstackable\":false},{\"id\":55,\"l\":40,\"b\":25,\"h\":26,\"weight\":15.288498245087968,\"spinnable\":true,\"unstackable\":false},{\"id\":56,\"l\":29,\"b\":21,\"h\":26,\"weight\":11.612053031746834,\"spinnable\":true,\"unstackable\":false},{\"id\":57,\"l\":24,\"b\":38,\"h\":30,\"weight\":1.0558516088625391,\"spinnable\":true,\"unstackable\":false},{\"id\":58,\"l\":34,\"b\":40,\"h\":22,\"weight\":23.331385361416388,\"spinnable\":true,\"unstackable\":true},{\"id\":59,\"l\":34,\"b\":27,\"h\":22,\"weight\":25.74511254248882,\"spinnable\":true,\"unstackable\":false},{\"id\":60,\"l\":24,\"b\":28,\"h\":37,\"weight\":1.2778237657838787,\"spinnable\":true,\"unstackable\":false},{\"id\":61,\"l\":29,\"b\":33,\"h\":36,\"weight\":3.4189831500297574,\"spinnable\":true,\"unstackable\":false},{\"id\":62,\"l\":33,\"b\":31,\"h\":26,\"weight\":6.59874363845558,\"spinnable\":true,\"unstackable\":true},{\"id\":63,\"l\":27,\"b\":23,\"h\":30,\"weight\":7.660088863188044,\"spinnable\":true,\"unstackable\":false},{\"id\":64,\"l\":24,\"b\":25,\"h\":30,\"weight\":20.936317023318882,\"spinnable\":true,\"unstackable\":true},{\"id\":65,\"l\":39,\"b\":36,\"h\":23,\"weight\":25.68739595498892,\"spinnable\":true,\"unstackable\":false},{\"id\":66,\"l\":26,\"b\":24,\"h\":36,\"weight\":8.785644354594693,\"spinnable\":true,\"unstackable\":false},{\"id\":67,\"l\":24,\"b\":26,\"h\":33,\"weight\":11.094059931953304,\"spinnable\":true,\"unstackable\":false},{\"id\":68,\"l\":37,\"b\":31,\"h\":38,\"weight\":9.321486670842718,\"spinnable\":true,\"unstackable\":false},{\"id\":69,\"l\":25,\"b\":32,\"h\":21,\"weight\":25.69819577001019,\"spinnable\":true,\"unstackable\":false},{\"id\":70,\"l\":38,\"b\":28,\"h\":26,\"weight\":1.7986507266475482,\"spinnable\":true,\"unstackable\":false},{\"id\":71,\"l\":24,\"b\":36,\"h\":40,\"weight\":3.080008941299668,\"spinnable\":true,\"unstackable\":false},{\"id\":72,\"l\":37,\"b\":23,\"h\":23,\"weight\":19.50192913546031,\"spinnable\":true,\"unstackable\":false},{\"id\":73,\"l\":40,\"b\":22,\"h\":21,\"weight\":23.388158737319632,\"spinnable\":true,\"unstackable\":false},{\"id\":74,\"l\":39,\"b\":34,\"h\":40,\"weight\":19.847365397111453,\"spinnable\":true,\"unstackable\":false},{\"id\":75,\"l\":40,\"b\":29,\"h\":34,\"weight\":18.979412438525202,\"spinnable\":true,\"unstackable\":false},{\"id\":76,\"l\":39,\"b\":24,\"h\":32,\"weight\":24.894770334246147,\"spinnable\":true,\"unstackable\":false},{\"id\":77,\"l\":27,\"b\":40,\"h\":34,\"weight\":15.478405452858441,\"spinnable\":true,\"unstackable\":false},{\"id\":78,\"l\":31,\"b\":31,\"h\":28,\"weight\":29.37979494172893,\"spinnable\":true,\"unstackable\":false},{\"id\":79,\"l\":24,\"b\":35,\"h\":32,\"weight\":10.740385595370704,\"spinnable\":true,\"unstackable\":true},{\"id\":80,\"l\":30,\"b\":40,\"h\":36,\"weight\":8.059603701569573,\"spinnable\":true,\"unstackable\":false},{\"id\":81,\"l\":23,\"b\":39,\"h\":40,\"weight\":13.06278833760581,\"spinnable\":true,\"unstackable\":false},{\"id\":82,\"l\":33,\"b\":31,\"h\":33,\"weight\":25.35928755678367,\"spinnable\":true,\"unstackable\":false},{\"id\":83,\"l\":30,\"b\":22,\"h\":21,\"weight\":24.881923649531863,\"spinnable\":true,\"unstackable\":false},{\"id\":84,\"l\":37,\"b\":36,\"h\":27,\"weight\":27.39252999571513,\"spinnable\":true,\"unstackable\":false},{\"id\":85,\"l\":36,\"b\":28,\"h\":38,\"weight\":10.79231821355978,\"spinnable\":true,\"unstackable\":true},{\"id\":86,\"l\":27,\"b\":29,\"h\":25,\"weight\":8.420832772919521,\"spinnable\":true,\"unstackable\":false},{\"id\":87,\"l\":28,\"b\":30,\"h\":38,\"weight\":0.35878876682817307,\"spinnable\":true,\"unstackable\":false},{\"id\":88,\"l\":34,\"b\":36,\"h\":35,\"weight\":27.89527064295339,\"spinnable\":true,\"unstackable\":false},{\"id\":89,\"l\":36,\"b\":39,\"h\":23,\"weight\":14.839306011646634,\"spinnable\":true,\"unstackable\":true},{\"id\":90,\"l\":35,\"b\":33,\"h\":27,\"weight\":2.958635262597933,\"spinnable\":true,\"unstackable\":false},{\"id\":91,\"l\":25,\"b\":36,\"h\":28,\"weight\":8.59854917139691,\"spinnable\":true,\"unstackable\":false},{\"id\":92,\"l\":39,\"b\":32,\"h\":22,\"weight\":4.5821202673375705,\"spinnable\":true,\"unstackable\":false},{\"id\":93,\"l\":29,\"b\":38,\"h\":40,\"weight\":5.291723054736055,\"spinnable\":true,\"unstackable\":false},{\"id\":94,\"l\":21,\"b\":33,\"h\":28,\"weight\":28.849311082360167,\"spinnable\":true,\"unstackable\":true},{\"id\":95,\"l\":38,\"b\":23,\"h\":22,\"weight\":4.570698515374505,\"spinnable\":true,\"unstackable\":false},{\"id\":96,\"l\":29,\"b\":40,\"h\":26,\"weight\":16.825154762749893,\"spinnable\":true,\"unstackable\":false},{\"id\":97,\"l\":29,\"b\":39,\"h\":31,\"weight\":7.5276352138148255,\"spinnable\":true,\"unstackable\":false},{\"id\":98,\"l\":26,\"b\":32,\"h\":31,\"weight\":14.934745545818021,\"spinnable\":true,\"unstackable\":false},{\"id\":99,\"l\":40,\"b\":38,\"h\":37,\"weight\":3.1596082057840147,\"spinnable\":true,\"unstackable\":false}];\r\n\r\n// Thicc\r\nlet newItems = [{\"id\":0,\"l\":37,\"b\":36,\"h\":33,\"weight\":10.988112023001298,\"spinnable\":true,\"unstackable\":false},{\"id\":1,\"l\":40,\"b\":31,\"h\":31,\"weight\":13.703375340109243,\"spinnable\":true,\"unstackable\":false},{\"id\":2,\"l\":34,\"b\":32,\"h\":32,\"weight\":29.042713097124608,\"spinnable\":true,\"unstackable\":false},{\"id\":3,\"l\":37,\"b\":40,\"h\":32,\"weight\":8.839781028166428,\"spinnable\":true,\"unstackable\":false},{\"id\":4,\"l\":34,\"b\":32,\"h\":34,\"weight\":3.251097161905596,\"spinnable\":true,\"unstackable\":false},{\"id\":5,\"l\":37,\"b\":31,\"h\":31,\"weight\":7.174243652141659,\"spinnable\":true,\"unstackable\":false},{\"id\":6,\"l\":36,\"b\":34,\"h\":39,\"weight\":12.433084036649582,\"spinnable\":true,\"unstackable\":false},{\"id\":7,\"l\":40,\"b\":32,\"h\":32,\"weight\":6.2653089060356475,\"spinnable\":true,\"unstackable\":false},{\"id\":8,\"l\":32,\"b\":39,\"h\":34,\"weight\":10.951534008334512,\"spinnable\":true,\"unstackable\":false},{\"id\":9,\"l\":39,\"b\":31,\"h\":35,\"weight\":19.44885386094845,\"spinnable\":true,\"unstackable\":false},{\"id\":10,\"l\":36,\"b\":33,\"h\":33,\"weight\":15.177224210335345,\"spinnable\":true,\"unstackable\":false},{\"id\":11,\"l\":32,\"b\":32,\"h\":34,\"weight\":9.776399094159443,\"spinnable\":true,\"unstackable\":false},{\"id\":12,\"l\":33,\"b\":32,\"h\":39,\"weight\":11.755233994245117,\"spinnable\":true,\"unstackable\":false},{\"id\":13,\"l\":35,\"b\":39,\"h\":33,\"weight\":21.385401361090512,\"spinnable\":true,\"unstackable\":false},{\"id\":14,\"l\":31,\"b\":39,\"h\":33,\"weight\":16.22998205370053,\"spinnable\":true,\"unstackable\":false},{\"id\":15,\"l\":40,\"b\":39,\"h\":36,\"weight\":4.858776860869478,\"spinnable\":true,\"unstackable\":false},{\"id\":16,\"l\":37,\"b\":34,\"h\":38,\"weight\":29.985479970523528,\"spinnable\":true,\"unstackable\":false},{\"id\":17,\"l\":33,\"b\":38,\"h\":40,\"weight\":14.479773938916072,\"spinnable\":true,\"unstackable\":false},{\"id\":18,\"l\":38,\"b\":34,\"h\":37,\"weight\":21.656654212532228,\"spinnable\":true,\"unstackable\":false},{\"id\":19,\"l\":38,\"b\":35,\"h\":37,\"weight\":25.31466945946865,\"spinnable\":true,\"unstackable\":false},{\"id\":20,\"l\":36,\"b\":33,\"h\":36,\"weight\":29.127235671701335,\"spinnable\":true,\"unstackable\":false},{\"id\":21,\"l\":35,\"b\":32,\"h\":31,\"weight\":24.030347276990124,\"spinnable\":true,\"unstackable\":false},{\"id\":22,\"l\":32,\"b\":33,\"h\":35,\"weight\":28.13220633803215,\"spinnable\":true,\"unstackable\":false},{\"id\":23,\"l\":36,\"b\":40,\"h\":33,\"weight\":20.24742214787223,\"spinnable\":true,\"unstackable\":false},{\"id\":24,\"l\":33,\"b\":35,\"h\":36,\"weight\":14.84357214997004,\"spinnable\":true,\"unstackable\":false},{\"id\":25,\"l\":38,\"b\":34,\"h\":32,\"weight\":13.685213219639103,\"spinnable\":true,\"unstackable\":false},{\"id\":26,\"l\":40,\"b\":34,\"h\":33,\"weight\":0.8723397310193204,\"spinnable\":true,\"unstackable\":false},{\"id\":27,\"l\":32,\"b\":36,\"h\":38,\"weight\":18.915321091619333,\"spinnable\":true,\"unstackable\":false},{\"id\":28,\"l\":36,\"b\":39,\"h\":38,\"weight\":10.851744026230563,\"spinnable\":true,\"unstackable\":false},{\"id\":29,\"l\":35,\"b\":34,\"h\":36,\"weight\":11.865213404891264,\"spinnable\":true,\"unstackable\":true},{\"id\":30,\"l\":33,\"b\":37,\"h\":33,\"weight\":6.248044582375549,\"spinnable\":true,\"unstackable\":false},{\"id\":31,\"l\":35,\"b\":38,\"h\":38,\"weight\":9.17050964955704,\"spinnable\":true,\"unstackable\":false},{\"id\":32,\"l\":37,\"b\":34,\"h\":36,\"weight\":18.150721433002563,\"spinnable\":true,\"unstackable\":false},{\"id\":33,\"l\":33,\"b\":35,\"h\":37,\"weight\":8.309666928823559,\"spinnable\":true,\"unstackable\":false},{\"id\":34,\"l\":34,\"b\":35,\"h\":39,\"weight\":27.691152696766814,\"spinnable\":true,\"unstackable\":true},{\"id\":35,\"l\":32,\"b\":39,\"h\":34,\"weight\":0.7932463781880439,\"spinnable\":true,\"unstackable\":false},{\"id\":36,\"l\":39,\"b\":36,\"h\":39,\"weight\":26.093478073363407,\"spinnable\":true,\"unstackable\":true},{\"id\":37,\"l\":39,\"b\":32,\"h\":33,\"weight\":1.2735233894945441,\"spinnable\":true,\"unstackable\":false},{\"id\":38,\"l\":32,\"b\":31,\"h\":37,\"weight\":26.633528821533435,\"spinnable\":true,\"unstackable\":false},{\"id\":39,\"l\":37,\"b\":33,\"h\":37,\"weight\":21.867765249616816,\"spinnable\":true,\"unstackable\":false},{\"id\":40,\"l\":38,\"b\":35,\"h\":38,\"weight\":21.46948354422409,\"spinnable\":true,\"unstackable\":false},{\"id\":41,\"l\":37,\"b\":31,\"h\":32,\"weight\":6.017640257845411,\"spinnable\":true,\"unstackable\":true},{\"id\":42,\"l\":39,\"b\":34,\"h\":32,\"weight\":10.72196824276742,\"spinnable\":true,\"unstackable\":false},{\"id\":43,\"l\":38,\"b\":40,\"h\":33,\"weight\":14.031503840209826,\"spinnable\":true,\"unstackable\":false},{\"id\":44,\"l\":34,\"b\":32,\"h\":40,\"weight\":25.059623923371145,\"spinnable\":true,\"unstackable\":false},{\"id\":45,\"l\":39,\"b\":39,\"h\":37,\"weight\":3.4314437234692763,\"spinnable\":true,\"unstackable\":false},{\"id\":46,\"l\":39,\"b\":38,\"h\":39,\"weight\":1.3516047614056248,\"spinnable\":true,\"unstackable\":false},{\"id\":47,\"l\":36,\"b\":40,\"h\":36,\"weight\":13.614577990421697,\"spinnable\":true,\"unstackable\":false},{\"id\":48,\"l\":32,\"b\":36,\"h\":32,\"weight\":5.25384893947356,\"spinnable\":true,\"unstackable\":false},{\"id\":49,\"l\":33,\"b\":31,\"h\":39,\"weight\":18.346098229988975,\"spinnable\":true,\"unstackable\":false},{\"id\":50,\"l\":40,\"b\":38,\"h\":38,\"weight\":16.97974738966603,\"spinnable\":true,\"unstackable\":false},{\"id\":51,\"l\":31,\"b\":34,\"h\":37,\"weight\":12.515503102341533,\"spinnable\":true,\"unstackable\":false},{\"id\":52,\"l\":35,\"b\":37,\"h\":35,\"weight\":29.673056310617806,\"spinnable\":true,\"unstackable\":false},{\"id\":53,\"l\":39,\"b\":34,\"h\":34,\"weight\":10.204513769034351,\"spinnable\":true,\"unstackable\":false},{\"id\":54,\"l\":35,\"b\":32,\"h\":40,\"weight\":27.514475994795927,\"spinnable\":true,\"unstackable\":false},{\"id\":55,\"l\":31,\"b\":37,\"h\":40,\"weight\":4.244292875514999,\"spinnable\":true,\"unstackable\":true},{\"id\":56,\"l\":39,\"b\":34,\"h\":37,\"weight\":18.127025040903874,\"spinnable\":true,\"unstackable\":false},{\"id\":57,\"l\":37,\"b\":33,\"h\":33,\"weight\":24.83927533545364,\"spinnable\":true,\"unstackable\":false},{\"id\":58,\"l\":38,\"b\":32,\"h\":33,\"weight\":18.46349861299258,\"spinnable\":true,\"unstackable\":true},{\"id\":59,\"l\":32,\"b\":31,\"h\":40,\"weight\":25.98771589288722,\"spinnable\":true,\"unstackable\":false},{\"id\":60,\"l\":37,\"b\":34,\"h\":37,\"weight\":2.723034742005006,\"spinnable\":true,\"unstackable\":false},{\"id\":61,\"l\":38,\"b\":39,\"h\":32,\"weight\":13.085985957825216,\"spinnable\":true,\"unstackable\":false},{\"id\":62,\"l\":32,\"b\":37,\"h\":31,\"weight\":27.41883698646971,\"spinnable\":true,\"unstackable\":false},{\"id\":63,\"l\":31,\"b\":40,\"h\":32,\"weight\":28.353349821679707,\"spinnable\":true,\"unstackable\":false},{\"id\":64,\"l\":40,\"b\":31,\"h\":34,\"weight\":21.554916554061226,\"spinnable\":true,\"unstackable\":false},{\"id\":65,\"l\":31,\"b\":33,\"h\":34,\"weight\":22.899916191234094,\"spinnable\":true,\"unstackable\":false},{\"id\":66,\"l\":40,\"b\":33,\"h\":37,\"weight\":0.9658442078983343,\"spinnable\":true,\"unstackable\":false},{\"id\":67,\"l\":36,\"b\":33,\"h\":40,\"weight\":26.431299122806486,\"spinnable\":true,\"unstackable\":false},{\"id\":68,\"l\":40,\"b\":35,\"h\":36,\"weight\":14.086151933933408,\"spinnable\":true,\"unstackable\":false},{\"id\":69,\"l\":40,\"b\":33,\"h\":36,\"weight\":28.786451181068646,\"spinnable\":true,\"unstackable\":false},{\"id\":70,\"l\":38,\"b\":36,\"h\":34,\"weight\":14.401168016889347,\"spinnable\":true,\"unstackable\":false},{\"id\":71,\"l\":34,\"b\":34,\"h\":31,\"weight\":20.624617102701272,\"spinnable\":true,\"unstackable\":false},{\"id\":72,\"l\":39,\"b\":33,\"h\":31,\"weight\":12.348702110189674,\"spinnable\":true,\"unstackable\":false},{\"id\":73,\"l\":36,\"b\":31,\"h\":33,\"weight\":22.519806610000064,\"spinnable\":true,\"unstackable\":false},{\"id\":74,\"l\":35,\"b\":35,\"h\":35,\"weight\":2.0856462822525845,\"spinnable\":true,\"unstackable\":false},{\"id\":75,\"l\":33,\"b\":40,\"h\":36,\"weight\":27.990722754394454,\"spinnable\":true,\"unstackable\":false},{\"id\":76,\"l\":32,\"b\":36,\"h\":36,\"weight\":18.817268558191532,\"spinnable\":true,\"unstackable\":false},{\"id\":77,\"l\":39,\"b\":35,\"h\":34,\"weight\":3.6286696613380154,\"spinnable\":true,\"unstackable\":false},{\"id\":78,\"l\":37,\"b\":31,\"h\":32,\"weight\":28.976485958073003,\"spinnable\":true,\"unstackable\":false},{\"id\":79,\"l\":31,\"b\":39,\"h\":38,\"weight\":28.798699436241478,\"spinnable\":true,\"unstackable\":false},{\"id\":80,\"l\":40,\"b\":34,\"h\":31,\"weight\":17.29985869106794,\"spinnable\":true,\"unstackable\":false},{\"id\":81,\"l\":33,\"b\":38,\"h\":36,\"weight\":7.18810015995988,\"spinnable\":true,\"unstackable\":false},{\"id\":82,\"l\":40,\"b\":40,\"h\":34,\"weight\":23.233776932016635,\"spinnable\":true,\"unstackable\":false},{\"id\":83,\"l\":37,\"b\":33,\"h\":38,\"weight\":25.028919631776798,\"spinnable\":true,\"unstackable\":false},{\"id\":84,\"l\":34,\"b\":35,\"h\":35,\"weight\":0.6175231189715991,\"spinnable\":true,\"unstackable\":false},{\"id\":85,\"l\":33,\"b\":34,\"h\":33,\"weight\":29.081898069395486,\"spinnable\":true,\"unstackable\":false},{\"id\":86,\"l\":35,\"b\":35,\"h\":33,\"weight\":1.890561163184299,\"spinnable\":true,\"unstackable\":false},{\"id\":87,\"l\":39,\"b\":40,\"h\":34,\"weight\":26.244579989863276,\"spinnable\":true,\"unstackable\":true},{\"id\":88,\"l\":32,\"b\":37,\"h\":33,\"weight\":14.907347945892882,\"spinnable\":true,\"unstackable\":true},{\"id\":89,\"l\":38,\"b\":37,\"h\":36,\"weight\":28.32519684267538,\"spinnable\":true,\"unstackable\":false},{\"id\":90,\"l\":38,\"b\":39,\"h\":37,\"weight\":13.634675781858096,\"spinnable\":true,\"unstackable\":true},{\"id\":91,\"l\":32,\"b\":33,\"h\":40,\"weight\":5.6985629198398735,\"spinnable\":true,\"unstackable\":false},{\"id\":92,\"l\":37,\"b\":38,\"h\":37,\"weight\":20.16822254546985,\"spinnable\":true,\"unstackable\":false},{\"id\":93,\"l\":36,\"b\":32,\"h\":33,\"weight\":11.47233772694033,\"spinnable\":true,\"unstackable\":false},{\"id\":94,\"l\":38,\"b\":37,\"h\":34,\"weight\":10.336963099422487,\"spinnable\":true,\"unstackable\":false},{\"id\":95,\"l\":37,\"b\":31,\"h\":31,\"weight\":24.02771542188681,\"spinnable\":true,\"unstackable\":false},{\"id\":96,\"l\":39,\"b\":35,\"h\":35,\"weight\":18.31038758619801,\"spinnable\":true,\"unstackable\":false},{\"id\":97,\"l\":32,\"b\":40,\"h\":31,\"weight\":23.009363573391436,\"spinnable\":true,\"unstackable\":false},{\"id\":98,\"l\":31,\"b\":31,\"h\":39,\"weight\":6.610278598775721,\"spinnable\":true,\"unstackable\":false},{\"id\":99,\"l\":34,\"b\":39,\"h\":38,\"weight\":1.5676067222083412,\"spinnable\":true,\"unstackable\":false}];\r\n\r\n/*let newItems = Array(100).fill(true).map((_, id) => {\r\n  const d = Math.ceil(Math.random() * 30)\r\n  return {\r\n    id,\r\n    l: Math.ceil(Math.random() * 10) + 30,\r\n    b: Math.ceil(Math.random() * 10) + 30,\r\n    h: Math.ceil(Math.random() * 10) + 30,\r\n    weight: Math.random() * 30,\r\n    spinnable: true,\r\n    unstackable: Math.floor(Math.random() * 6) === 0\r\n  }\r\n});\r\n\r\nconsole.log('items');\r\nconsole.log(JSON.stringify(newItems));*/\r\n\r\n/*let newItems = Array(100).fill(true).map((_, id) => {\r\n  const d = Math.ceil(Math.random() * 20) + 20\r\n  return {\r\n    id,\r\n    l: d,\r\n    b: d,\r\n    h: d,\r\n    weight: Math.random() * 30,\r\n    spinnable: true\r\n  }\r\n});*/\r\n\r\nwindow.newItems = newItems;\r\n\r\n/*newItems.sort((a, b) => a.weight < b.weight ? 1 : -1)\r\n  .forEach((item, i) => {\r\n    if (i < 5) {\r\n      item.heavy = true;\r\n    }\r\n  });*/\r\n\r\nsortItemsByVolume(newItems);\r\n\r\ndebugger;\r\n\r\nnewItems = putNHeaviestItemsFirst(newItems);\r\n\r\nnewItems.reverse();\r\n\r\ndebugger;\r\n\r\n//newItems[94] = {\"id\":66,\"l\":37,\"b\":10,\"h\":50,\"weight\":16.93326049314387};\r\n\r\n/*const newItems = sortItemsByVolume(Array(200).fill(true).map(() => ({\r\n  l: Math.random() * 50,\r\n  b: Math.random() * 50,\r\n  h: Math.random() * 50,\r\n})));*/\r\n\r\n\r\nexport default () => {\r\n  const [ulds, setUlds]  = useState([]);\r\n  /*useEffect(() => {\r\n\t  debugger;\r\n    fetch('http://localhost:8080/pack', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(d)\r\n    }).then(data => {\r\n      data.json().then(data => setUlds(data))\r\n    });\r\n  }, []);*/\r\n\r\n  /*const subBins = [{\r\n    x: -122 + 40 + (244 - 40) / 2,\r\n    y: -81.5 + 45 / 2,\r\n    z: -81.5 + 163 / 2,\r\n    l: 244 - 40,\r\n    b: 45,\r\n    h: 163\r\n  }];*/\r\n  const [_items, setItems] = useState(items);\r\n\r\n  const addItem = () => {\r\n    const nextItem = newItems.pop();\r\n\r\n    if (nextItem) {\r\n      items = items.concat(nextItem);\r\n      items.forEach(_ => _.packed = false)\r\n      let result = pack(items);\r\n\r\n      console.dir(result.items);\r\n\r\n      items = result.items;\r\n\r\n      setItems(result.items);\r\n\r\n      if (newItems.length > 0) {\r\n        //setTimeout(addItem, 100);\r\n      }\r\n      /*else while (items.filter(_ => !_.packed).length !== 0) {debugger;\r\n        result = pack(items);\r\n        items = result.items;\r\n      }*/\r\n    }\r\n  }\r\n\r\n  const packedItems = _items.filter(_ => _.packed);\r\n\r\n  return (\r\n    <>\r\n      {/*<div>\r\n        {(ulds || []).reduce((acc, uld) => acc + uld.items.length, 0)}\r\n      </div>*/}\r\n      <div>\r\n        Bins: {bins.length}\r\n        Pack status: {packedItems.length} / {_items.length}\r\n        {' '}Occupancy: {packedItems.reduce((acc, i ) => acc + (i.l * i.b * i.h), 0) / (244 * 163 * 163) * 100}\r\n      </div>\r\n      {shape.map(uld =>\r\n        <Canvas style={style} camera={camera}>\r\n          <ULDScene uld={uld} items={_items} subBins={[]/*binsForHeaviestFromMiddle *//*[\r\n      splitBinByLength(theBin, items[0]),\r\n      splitBinByBreadth(theBin, items[0]),\r\n      splitBinByHeight(theBin, items[0])\r\n  ]*/} />\r\n        </Canvas>)}\r\n      <button onClick={addItem}>Pack</button>\r\n    </>\r\n  );\r\n};\r\n\r\n/*const splitBinByLength = (bin, item) => {\r\n  return {\r\n    x: -bin.l / 2 + item.l + (bin.l - item.l) / 2,\r\n    y: -bin.b / 2 + item.b / 2,\r\n    z: -bin.h / 2 + bin.h / 2,\r\n    l: bin.l - item.l,\r\n    b: item.b,\r\n    h: bin.h,\r\n    color: '#CECECE'\r\n  };\r\n};*/\r\n"]},"metadata":{},"sourceType":"module"}