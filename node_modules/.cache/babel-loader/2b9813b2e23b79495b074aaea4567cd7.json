{"ast":null,"code":"import _defineProperty from \"/home/gov/projects/three/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as types from './types';\nconst initialState = {\n  plannedGroups: {},\n  ulds: {},\n  awbs: {},\n  dimensions: {}\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case types.GROUPS_FETCHED:\n      return action.groups;\n\n    case types.AWB_FILTER_UPDATED:\n      const filteredAwb = action.filteredAwb;\n      return _objectSpread({}, state, {\n        filteredAwb\n      });\n\n    case types.GROUP_FILTER_UPDATED:\n      const filteredGroup = action.filteredGroup;\n      return _objectSpread({}, state, {\n        filteredGroup\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/home/gov/projects/three/src/threedloadplan/reducer.js"],"names":["types","initialState","plannedGroups","ulds","awbs","dimensions","state","action","type","GROUPS_FETCHED","groups","AWB_FILTER_UPDATED","filteredAwb","GROUP_FILTER_UPDATED","filteredGroup"],"mappings":";;;;;;AAAA,OAAO,KAAKA,KAAZ,MAAuB,SAAvB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,aAAa,EAAE,EADI;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,IAAI,EAAE,EAHa;AAInBC,EAAAA,UAAU,EAAE;AAJO,CAArB;AAOA,gBAAe,CAACC,KAAK,GAAGL,YAAT,EAAuBM,MAAvB,KAAkC;AAC/C,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,KAAK,CAACS,cAAX;AACE,aAAOF,MAAM,CAACG,MAAd;;AACF,SAAKV,KAAK,CAACW,kBAAX;AAAA,YACUC,WADV,GAC0BL,MAD1B,CACUK,WADV;AAEE,+BAAWN,KAAX;AAAkBM,QAAAA;AAAlB;;AACF,SAAKZ,KAAK,CAACa,oBAAX;AAAA,YACUC,aADV,GAC4BP,MAD5B,CACUO,aADV;AAEE,+BAAWR,KAAX;AAAkBQ,QAAAA;AAAlB;;AACF;AACE,aAAOR,KAAP;AAVJ;AAYD,CAbD","sourcesContent":["import * as types from './types';\r\n\r\nconst initialState = {\r\n  plannedGroups: {},\r\n  ulds: {},\r\n  awbs: {},\r\n  dimensions: {}\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case types.GROUPS_FETCHED:\r\n      return action.groups;\r\n    case types.AWB_FILTER_UPDATED:\r\n      const { filteredAwb } = action;\r\n      return {...state, filteredAwb};\r\n    case types.GROUP_FILTER_UPDATED:\r\n      const { filteredGroup } = action;\r\n      return {...state, filteredGroup};\r\n    default:\r\n      return state;\r\n  }\r\n};"]},"metadata":{},"sourceType":"module"}